ecommerce boot function before chat


<?php

namespace App\Providers;

use App\Models\EmailConfiguration;
use App\Models\GeneralSetting;
use App\Models\LogoSetting;
use App\Models\PusherSetting;
use Illuminate\Pagination\Paginator;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\View;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Paginator::useBootstrap();

        $generalSetting = GeneralSetting::first();
        $logoSetting = LogoSetting::first();
        $mailSetting = EmailConfiguration::first();
        $pusherSetting = PusherSetting::first();
        /** set time zone */
        Config::set('app.timezone', $generalSetting->time_zone);

        /** Set Mail Config */
        Config::set('mail.mailers.smtp.host', $mailSetting->host);
        Config::set('mail.mailers.smtp.port', $mailSetting->port);
        Config::set('mail.mailers.smtp.encryption', $mailSetting->encryption);
        Config::set('mail.mailers.smtp.username', $mailSetting->username);
        Config::set('mail.mailers.smtp.password', $mailSetting->password);

        /** Set Broadcasting Config */
        Config::set('broadcasting.connections.pusher.key', $pusherSetting->pusher_key);
        Config::set('broadcasting.connections.pusher.secret', $pusherSetting->pusher_secret);
        Config::set('broadcasting.connections.pusher.app_id', $pusherSetting->pusher_app_id);
        Config::set('broadcasting.connections.pusher.options.host', "api-".$pusherSetting->pusher_cluster.".pusher.com");



        /** Share variable at all view */
        View::composer('*', function($view) use ($generalSetting, $logoSetting, $pusherSetting){
            $view->with(['settings' => $generalSetting, 'logoSetting' => $logoSetting, 'pusherSetting' => $pusherSetting]);
        });
    }
}


-------------------------
after chat


<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\Schema; // Import Schema facade
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\View;
use App\Models\EmailConfiguration;
use App\Models\GeneralSetting;
use App\Models\LogoSetting;
use App\Models\PusherSetting;
use Illuminate\Pagination\Paginator;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Paginator::useBootstrap();
        $generalSetting = null;
        $logoSetting = null;
        $pusherSetting = null;

        // Check if the tables exist before attempting to query them
        if (Schema::hasTable('general_settings')) {
            $generalSetting = GeneralSetting::first();
            // Make sure to also check if $generalSetting is not null before using it
            if ($generalSetting) {
                Config::set('app.timezone', $generalSetting->time_zone);
            }
        }

        if (Schema::hasTable('logo_settings')) {
            $logoSetting = LogoSetting::first();
        } else {
            $logoSetting = null;
        }

        if (Schema::hasTable('email_configurations')) {
            $mailSetting = EmailConfiguration::first();
            if ($mailSetting) {
                /** Set Mail Config */
                Config::set('mail.mailers.smtp.host', $mailSetting->host);
                Config::set('mail.mailers.smtp.port', $mailSetting->port);
                Config::set('mail.mailers.smtp.encryption', $mailSetting->encryption);
                Config::set('mail.mailers.smtp.username', $mailSetting->username);
                Config::set('mail.mailers.smtp.password', $mailSetting->password);
            }
        }

        if (Schema::hasTable('pusher_settings')) {
            $pusherSetting = PusherSetting::first();
            if ($pusherSetting) {
                /** Set Broadcasting Config */
                Config::set('broadcasting.connections.pusher.key', $pusherSetting->pusher_key);
                Config::set('broadcasting.connections.pusher.secret', $pusherSetting->pusher_secret);
                Config::set('broadcasting.connections.pusher.app_id', $pusherSetting->pusher_app_id);
                Config::set('broadcasting.connections.pusher.options.host', "api-".$pusherSetting->pusher_cluster.".pusher.com");
            }
        }

        /** Share variables at all views conditionally */
        View::composer('*', function($view) use ($generalSetting, $logoSetting, $pusherSetting) {
            // Make sure to conditionally add settings based on their existence
            $settings = compact('generalSetting', 'logoSetting', 'pusherSetting');
            $view->with($settings);
        });
    }
}

--------------------------
HomeController before chat

<?php

namespace App\Http\Controllers\Frontend;

use App\Http\Controllers\Controller;
use App\Models\Adverisement;
use App\Models\Blog;
use App\Models\Brand;
use App\Models\Category;
use App\Models\ChildCategory;
use App\Models\FlashSale;
use App\Models\FlashSaleItem;
use App\Models\HomePageSetting;
use App\Models\Product;
use App\Models\Slider;
use App\Models\SubCategory;
use App\Models\Vendor;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Response;

class HomeController extends Controller
{
    public function index()
    {
        $sliders = Cache::rememberForever('sliders', function(){
            return Slider::where('status', 1)->orderBy('serial', 'asc')->get();
        });

        $flashSaleDate = FlashSale::first();

        $flashSaleItems = FlashSaleItem::where('show_at_home', 1)->where('status', 1)->pluck('product_id')->toArray();

        $popularCategory = HomePageSetting::where('key', 'popular_category_section')->first();
        $brands = Brand::where('status', 1)->where('is_featured', 1)->get();

        $typeBaseProducts = $this->getTypeBaseProduct();
        $categoryProductSliderSectionOne = HomePageSetting::where('key', 'product_slider_section_one')->first();
        $categoryProductSliderSectionTwo = HomePageSetting::where('key', 'product_slider_section_two')->first();
        $categoryProductSliderSectionThree = HomePageSetting::where('key', 'product_slider_section_three')->first();

        // banners

        $homepage_secion_banner_one = Adverisement::where('key', 'homepage_secion_banner_one')->first();
        $homepage_secion_banner_one = json_decode($homepage_secion_banner_one->value);

        $homepage_secion_banner_two = Adverisement::where('key', 'homepage_secion_banner_two')->first();
        $homepage_secion_banner_two = json_decode($homepage_secion_banner_two?->value);

        $homepage_secion_banner_three = Adverisement::where('key', 'homepage_secion_banner_three')->first();
        $homepage_secion_banner_three = json_decode($homepage_secion_banner_three?->value);

        $homepage_secion_banner_four = Adverisement::where('key', 'homepage_secion_banner_four')->first();
        $homepage_secion_banner_four = json_decode($homepage_secion_banner_four?->value);

        $recentBlogs = Blog::with(['category', 'user'])->where('status',1)->orderBy('id', 'DESC')->take(8)->get();

        return view('frontend.home.home',
            compact(
                'sliders',
                'flashSaleDate',
                'flashSaleItems',
                'popularCategory',
                'brands',
                'typeBaseProducts',
                'categoryProductSliderSectionOne',
                'categoryProductSliderSectionTwo',
                'categoryProductSliderSectionThree',

                'homepage_secion_banner_one',
                'homepage_secion_banner_two',
                'homepage_secion_banner_three',
                'homepage_secion_banner_four',
                'recentBlogs'

            ));
    }

    public function getTypeBaseProduct()
    {
        $typeBaseProducts = [];

        $typeBaseProducts['new_arrival'] = Product::withAvg('reviews', 'rating')->withCount('reviews')
        ->with(['variants', 'category', 'productImageGalleries'])
        ->where(['product_type' => 'new_arrival', 'is_approved' => 1, 'status' => 1])->orderBy('id', 'DESC')->take(8)->get();

        $typeBaseProducts['featured_product'] = Product::withAvg('reviews', 'rating')->withCount('reviews')
        ->with(['variants', 'category', 'productImageGalleries'])
        ->where(['product_type' => 'featured_product', 'is_approved' => 1, 'status' => 1])->orderBy('id', 'DESC')->take(8)->get();

        $typeBaseProducts['top_product'] = Product::withAvg('reviews', 'rating')->withCount('reviews')
        ->with(['variants', 'category', 'productImageGalleries'])
        ->where(['product_type' => 'top_product', 'is_approved' => 1, 'status' => 1])->orderBy('id', 'DESC')->take(8)->get();

        $typeBaseProducts['best_product'] = Product::withAvg('reviews', 'rating')->withCount('reviews')
        ->with(['variants', 'category', 'productImageGalleries'])
        ->where(['product_type' => 'best_product', 'is_approved' => 1, 'status' => 1])->orderBy('id', 'DESC')->take(8)->get();

        return $typeBaseProducts;
    }

    public function vendorPage()
    {
       $vendors = Vendor::where('status',1)->paginate(20);
       return view('frontend.pages.vendor', compact('vendors'));
    }

    public function vendorProductsPage(string $id)
    {

        $products = Product::where(['status' => 1, 'is_approved' => 1, 'vendor_id' => $id])->orderBy('id', 'DESC')->paginate(12);

        $categories = Category::where(['status' => 1])->get();
        $brands = Brand::where(['status' => 1])->get();
        $vendor = Vendor::findOrFail($id);

        return view('frontend.pages.vendor-product', compact('products', 'categories', 'brands', 'vendor'));

    }

    function ShowProductModal(string $id) {
       $product = Product::findOrFail($id);

       $content = view('frontend.layouts.modal', compact('product'))->render();

       return Response::make($content, 200, ['Content-Type' => 'text/html']);
    }
}


-----------------------
HomeController After Chat

<?php

namespace App\Http\Controllers\Frontend;

use App\Http\Controllers\Controller;
use App\Models\Adverisement; // Corrected model name
use App\Models\Blog;
use App\Models\Brand;
use App\Models\Category;
use App\Models\FlashSale;
use App\Models\FlashSaleItem;
use App\Models\HomePageSetting;
use App\Models\Product;
use App\Models\Slider;
use App\Models\Vendor;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Response;

class HomeController extends Controller
{
    public function index()
    {
        $sliders = $this->getCachedSliders();
        $flashSaleDate = FlashSale::first();
        $flashSaleItems = FlashSaleItem::where('show_at_home', 1)
                                        ->where('status', 1)
                                        ->pluck('product_id')
                                        ->toArray();
        $popularCategory = HomePageSetting::where('key', 'popular_category_section')->first();
        $brands = Brand::where('status', 1)->where('is_featured', 1)->get();
        $typeBaseProducts = $this->getTypeBaseProducts();
        $categoryProductSliderSections = $this->getCategoryProductSliderSections();
        $advertisements = $this->getAdvertisements();
        $recentBlogs = Blog::with(['category', 'user'])
                            ->where('status', 1)
                            ->latest('id')
                            ->take(8)
                            ->get();

        return view('frontend.home.home', compact(
            'sliders', 'flashSaleDate', 'flashSaleItems', 'popularCategory', 'brands',
            'typeBaseProducts', 'categoryProductSliderSections', 'advertisements', 'recentBlogs'
        ));
    }

    private function getCachedSliders()
    {
        return Cache::rememberForever('sliders', function () {
            return Slider::where('status', 1)->orderBy('serial', 'asc')->get();
        });
    }

    private function getTypeBaseProducts()
    {
        $productTypes = ['new_arrival', 'featured_product', 'top_product', 'best_product'];
        $typeBaseProducts = [];

        foreach ($productTypes as $type) {
            $typeBaseProducts[$type] = Product::withAvg('reviews', 'rating')
                                               ->withCount('reviews')
                                               ->with(['variants', 'category', 'productImageGalleries'])
                                               ->where([
                                                   'product_type' => $type,
                                                   'is_approved' => 1,
                                                   'status' => 1
                                               ])->latest('id')->take(8)->get();
        }

        return $typeBaseProducts;
    }

    private function getCategoryProductSliderSections()
    {
        $keys = ['product_slider_section_one', 'product_slider_section_two', 'product_slider_section_three'];
        $sections = [];

        foreach ($keys as $key) {
            $sections[$key] = HomePageSetting::where('key', $key)->first();
        }

        return $sections;
    }

    private function getAdvertisements()
    {
        $keys = [
            'homepage_section_banner_one', 'homepage_section_banner_two',
            'homepage_section_banner_three', 'homepage_section_banner_four'
        ];
        $advertisements = [];

        foreach ($keys as $key) {
            $advertisement = Adverisement::where('key', $key)->first(); // Corrected model name
            $advertisements[$key] = $advertisement ? json_decode($advertisement->value) : null;
        }

        return $advertisements;
    }

    // Other methods remain unchanged

    public function ShowProductModal(string $id) {
        $product = Product::findOrFail($id);
        $content = view('frontend.layouts.modal', compact('product'))->render();
        return Response::make($content, 200, ['Content-Type' => 'text/html']);
    }
}


