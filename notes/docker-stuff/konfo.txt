the clone takes 2 GB 
git clone https://oauth2:<your-personal-access-token>@gitlab.com/<namespace>/<repository>.git


run commands for rbenv and check for zprofile befire rbenv local
check node version
data

# Create OpenProject user and set password
sudo groupadd openproject && \
sudo useradd --create-home --gid openproject openproject && \
echo "openproject:safeheaven81" | sudo chpasswd && \


# Install system dependencies
sudo apt-get update -y && \
sudo apt-get install -y zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libgdbm-dev libncurses5-dev automake libtool bison libffi-dev git curl poppler-utils unrtf tesseract-ocr catdoc libxml2 libxml2-dev libxslt1-dev imagemagick && \
sudo apt-get install -y memcached && \
sudo apt-get install -y postgresql postgresql-contrib libpq-dev && \
sudo apt-get install -y libpq-dev

takes less than 1GB

# Start PostgreSQL service
sudo systemctl start postgresql && \
sudo systemctl enable postgresql && \

# Setup PostgreSQL database
sudo -u postgres createuser -P openproject && \
sudo -u postgres createdb -O openproject openproject && \

# Install Ruby with rbenv
git clone https://github.com/rbenv/rbenv ~/.rbenv 
~/.rbenv/bin/rbenv init
rbenv install 3.3.4
rbenv local 3.3.4
source ~/.zprofile 
bundle

takes 3 GB

cp config/database.yml.example config/database.yml
change the pass 
sed -i "s/username: .*/username: kali/" config/database.yml
sed -i 's/password:/password: safeheaven81/' config/database.yml
sed -i "s/database: .*/database: openproject/" config/database.yml

sudo systemctl start postgresql
sudo -i -u postgres 
psql 
\du
CREATE USER openproject WITH PASSWORD 'openproject';

ALTER USER openproject WITH PASSWORD 'safeheaven81';
ALTER USER openproject WITH SUPERUSER;
CREATE USER kali WITH PASSWORD 'safeheaven81';

ALTER USER kali WITH SUPERUSER;
UPDATE pg_database
SET datcollate = 'en_US.UTF-8', datctype = 'en_US.UTF-8'
WHERE datname = 'template1';
ALTER DATABASE template1 REFRESH COLLATION VERSION;

\du
exit

remove all dockers docker system prune -a --volumes
access and install 
docker exec -it managit-worker-1 bash bundle install
rake db:create db:migrate
 
login to docker with the command


set all of .env config/database.yml config/database.yml.example 
run bundle install inside 
change the docker-compose.yml to all postgres



docker login registry.gitlab.com -u <YOUR_GITLAB_USERNAME> -p <YOUR_PERSONAL_ACCESS_TOKEN>

sudo docker pull registry.gitlab.com/managit-team/managit-otf/managit-backend:latest
sudo docker tag registry.gitlab.com/managit-team/managit-otf/managit-backend:latest managit-backend

sudo docker pull registry.gitlab.com/managit-team/managit-otf/managit-frontend:latest
sudo docker tag registry.gitlab.com/managit-team/managit-otf/managit-frontend:latest managit-frontend

or to push after login

create and change the token role to maintainer and login with sudo for both push and login  to avoid requested access to the resource is denied

sudo docker tag managit:latest registry.gitlab.com/managit-team/managit-otf/managit-backend:latest
sudo docker push registry.gitlab.com/managit-team/managit-otf/managit-backend:latest


gem install foreman
gem install overmind

in both the main and frontend folders run 
rm -rf node_modules package-lock.json
npm cache clean --force
npm install


npm run postinstall
rails assets:precompile

rails db:prepare
rails db:create
rails db:migrate
rails db:seed

rails c
User.pluck(:id, :mail)
User.find(5).update password: 'Test@12345'
bin/dev

--------------------
docker system prune -a --volumes
npm run serve
bin/dev
rails db:migrate
rails db:setup
rails assets:precompile
bin/dev
while running new terminal rails -c User.last
and another terminal rails db:seed
then back

sudo -u openproject bash -c '\
git clone https://github.com/sstephenson/rbenv.git ~/.rbenv && \
echo "export PATH=\"$HOME/.rbenv/bin:$PATH\"" >> ~/.profile && \
echo "eval \"$(rbenv init -)\"" >> ~/.profile && \
source ~/.profile && \
git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build && \
rbenv install 3.3.4 && \
rbenv rehash && \
rbenv global 3.3.4' && \

# Install Node with nodenv
sudo -u openproject bash -c '\
git clone https://github.com/OiNutter/nodenv.git ~/.nodenv && \
echo "export PATH=\"$HOME/.nodenv/bin:$PATH\"" >> ~/.profile && \
echo "eval \"$(nodenv init -)\"" >> ~/.profile && \
source ~/.profile && \
git clone https://github.com/OiNutter/node-build.git ~/.nodenv/plugins/node-build && \
nodenv install 14.16.0 && \
nodenv rehash && \
nodenv global 14.16.0' && \

# Clone OpenProject and install
git clone https://github.com/opf/openproject.git --branch stable/15 --depth 1



sudo -u openproject bash -c '\
cd ~ && \
git clone https://github.com/opf/openproject.git --branch stable/9 --depth 1 && \
cd openproject && \
gem update --system && \
gem install bundler && \
bundle install --deployment --without mysql2 sqlite development test therubyracer docker && \
npm install' && \

# Configure OpenProject
sudo -u openproject bash -c '\
cd ~/openproject && \
cp config/database.yml.example config/database.yml && \
sed -i "s/username: .*/username: openproject/" config/database.yml && \
sed -i "s/password: .*/password: safeheaven81/" config/database.yml && \
cp config/configuration.yml.example config/configuration.yml && \
sed -i "/production:/a\\smtp_address: smtp.gmail.com\\nsmtp_port: 587\\nsmtp_domain: smtp.gmail.com\\nsmtp_user_name: YOUR_EMAIL@gmail.com\\nsmtp_password: YOUR_EMAIL_PASSWORD\\nsmtp_enable_starttls_auto: true\\nsmtp_authentication: plain\\nrails_cache_store: :memcache" config/configuration.yml && \
RAILS_ENV="production" ./bin/rake db:create && \
RAILS_ENV="production" ./bin/rake db:migrate && \
RAILS_ENV="production" ./bin/rake db:seed && \
RAILS_ENV="production" ./bin/rake assets:precompile && \
echo "export SECRET_KEY_BASE=$(./bin/rails secret)" >> ~/.profile && \
source ~/.profile' && \

# Setup Apache and Passenger
sudo apt-get install -y apache2 libcurl4-gnutls-dev apache2-dev libapr1-dev libaprutil1-dev && \
sudo chmod o+x "/home/openproject" && \
sudo -u openproject bash -c '\
cd ~/openproject && \
gem install passenger && \
passenger-install-apache2-module' && \

# Configure Apache
sudo bash -c '\
echo "LoadModule passenger_module /home/openproject/.rbenv/versions/3.3.4/lib/ruby/gems/3.0.0/gems/passenger-6.0.0/buildout/apache2/mod_passenger.so" > /etc/apache2/mods-available/passenger.load && \
echo "<IfModule mod_passenger.c>\nPassengerRoot /home/openproject/.rbenv/versions/3.3.4/lib/ruby/gems/3.0.0/gems/passenger-6.0.0\nPassengerDefaultRuby /home/openproject/.rbenv/versions/3.3.4/bin/ruby\n</IfModule>" > /etc/apache2/mods-available/passenger.conf && \
a2enmod passenger && \
echo "SetEnv EXECJS_RUNTIME Disabled\n<VirtualHost *:80>\n   ServerName yourdomain.com\n   DocumentRoot /home/openproject/openproject/public\n   <Directory /home/openproject/openproject/public>\n      AllowOverride all\n      Options -MultiViews\n      Require all granted\n   </Directory>\n   <Location /assets/>\n     ExpiresActive On ExpiresDefault \"access plus 1 year\"\n   </Location>\n</VirtualHost>" > /etc/apache2/sites-available/openproject.conf && \
a2dissite 000-default && \
a2ensite openproject && \
service apache2 restart' && \

# Setup cron job for background jobs
sudo -u openproject crontab -l | { cat; echo "*/1 * * * * cd /home/openproject/openproject; /home/openproject/.rbenv/versions/3.3.4/bin/rake jobs:workoff"; } | sudo -u openproject crontab -

# Optional: Restart OpenProject server
sudo -u openproject touch /home/openproject/openproject/tmp/restart.txt

--------------
- to push your container 
login to gitlab 
docker login registry.gitlab.com -u <YOUR_GITLAB_USERNAME> -p <YOUR_PERSONAL_ACCESS_TOKEN>
to avoid denied: access forbidden


